{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bba0fe35",
   "metadata": {
    "papermill": {
     "duration": 0.023672,
     "end_time": "2023-07-21T06:40:20.615652",
     "exception": false,
     "start_time": "2023-07-21T06:40:20.591980",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The model consists of a transformer embedding, encoder, and decoder.\n",
    "\n",
    "Inference is performed by starting with an SOS token and predicting one character at a time using the previous prediction.\n",
    "\n",
    "**V6**\n",
    "\n",
    "This competition has an inference limit of 5 hours which requires careful allocation of computational resources in the model. Most changes are based on the assymetrical number of encoder/deocder calls during inference.\n",
    "\n",
    "Inference requires the encoder to encode the input frames and subsequently use that encoding to predict the 1st character by inputting the encoding and SOS (Start of Sentence) token. Next, the encoding, SOS token and 1st predicted token are used to predict the 2nd character. Inference thus requires 1 call to the encoder and multiple calls to the encoder. On average a phrase is 18 characters long, requiring 18+1(SOS token) calls to the decoder. To stay within the 5 hour inference limit the encoder can be computationally heavy, however the decoder should be light.\n",
    "\n",
    "Some inspiration is taken from the [1st place solution - training](https://www.kaggle.com/code/hoyso48/1st-place-solution-training) from the last [Google - Isolated Sign Language Recognition\n",
    "](https://www.kaggle.com/competitions/asl-signs) competition.\n",
    "\n",
    "* Increased training epochs 30 -> 100\n",
    "* Using all data for training, no validation set\n",
    "* Increased number of decoder blocks 2 -> 3\n",
    "* Increased encoder dimensions 256 -> 384\n",
    "* Halved attention dimension to decrease computational intensity of Multi Head Attention\n",
    "* Added 20% dropout to multi head attention output\n",
    "* Batch size 128 -> 64\n",
    "* Classification layer linear activation for logits in loss function\n",
    "\n",
    "**Helpful Tutorials**\n",
    "\n",
    "[English-to-Spanish translation with a sequence-to-sequence Transformer](https://keras.io/examples/nlp/neural_machine_translation_with_transformer/)\n",
    "\n",
    "[Lecture 12.1 Self-attention](https://www.youtube.com/watch?v=KmAISyVvE1Y&list=LL&index=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98169d9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:20.664176Z",
     "iopub.status.busy": "2023-07-21T06:40:20.663413Z",
     "iopub.status.idle": "2023-07-21T06:40:30.043700Z",
     "shell.execute_reply": "2023-07-21T06:40:30.042541Z"
    },
    "papermill": {
     "duration": 9.40664,
     "end_time": "2023-07-21T06:40:30.045858",
     "exception": false,
     "start_time": "2023-07-21T06:40:20.639218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensorflow Version 2.12.0\n",
      "Python Version: 3.10.10 | packaged by conda-forge | (main, Mar 24 2023, 20:08:06) [GCC 11.3.0]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "import seaborn as sn\n",
    "import tensorflow as tf\n",
    "import tensorflow_addons as tfa\n",
    "\n",
    "from tqdm.notebook import tqdm\n",
    "from sklearn.model_selection import train_test_split, GroupShuffleSplit\n",
    "from leven import levenshtein\n",
    "\n",
    "import glob\n",
    "import sys\n",
    "import os\n",
    "import math\n",
    "import gc\n",
    "import sys\n",
    "import sklearn\n",
    "import time\n",
    "import json\n",
    "\n",
    "# TQDM Progress Bar With Pandas Apply Function\n",
    "tqdm.pandas()\n",
    "\n",
    "print(f'Tensorflow Version {tf.__version__}')\n",
    "print(f'Python Version: {sys.version}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccedc680",
   "metadata": {
    "papermill": {
     "duration": 0.023118,
     "end_time": "2023-07-21T06:40:30.093325",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.070207",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Character 2 Ordinal Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0e6f4197",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:30.142864Z",
     "iopub.status.busy": "2023-07-21T06:40:30.140820Z",
     "iopub.status.idle": "2023-07-21T06:40:30.167201Z",
     "shell.execute_reply": "2023-07-21T06:40:30.166301Z"
    },
    "papermill": {
     "duration": 0.052729,
     "end_time": "2023-07-21T06:40:30.169218",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.116489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ordinal Encoding</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>!</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>#</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>$</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>&amp;</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>'</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>)</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>*</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>+</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>,</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>.</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>/</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>:</th>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>;</th>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>=</th>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>?</th>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>@</th>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>[</th>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>_</th>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f</th>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g</th>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h</th>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>i</th>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>j</th>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>k</th>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>l</th>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m</th>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n</th>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>o</th>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p</th>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q</th>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r</th>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s</th>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>u</th>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>v</th>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>w</th>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x</th>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y</th>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>z</th>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>~</th>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ordinal Encoding\n",
       "                  0\n",
       "!                 1\n",
       "#                 2\n",
       "$                 3\n",
       "%                 4\n",
       "&                 5\n",
       "'                 6\n",
       "(                 7\n",
       ")                 8\n",
       "*                 9\n",
       "+                10\n",
       ",                11\n",
       "-                12\n",
       ".                13\n",
       "/                14\n",
       "0                15\n",
       "1                16\n",
       "2                17\n",
       "3                18\n",
       "4                19\n",
       "5                20\n",
       "6                21\n",
       "7                22\n",
       "8                23\n",
       "9                24\n",
       ":                25\n",
       ";                26\n",
       "=                27\n",
       "?                28\n",
       "@                29\n",
       "[                30\n",
       "_                31\n",
       "a                32\n",
       "b                33\n",
       "c                34\n",
       "d                35\n",
       "e                36\n",
       "f                37\n",
       "g                38\n",
       "h                39\n",
       "i                40\n",
       "j                41\n",
       "k                42\n",
       "l                43\n",
       "m                44\n",
       "n                45\n",
       "o                46\n",
       "p                47\n",
       "q                48\n",
       "r                49\n",
       "s                50\n",
       "t                51\n",
       "u                52\n",
       "v                53\n",
       "w                54\n",
       "x                55\n",
       "y                56\n",
       "z                57\n",
       "~                58"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Read Character to Ordinal Encoding Mapping\n",
    "with open('/kaggle/input/asl-fingerspelling/character_to_prediction_index.json') as json_file:\n",
    "    CHAR2ORD = json.load(json_file)\n",
    "    \n",
    "# Ordinal to Character Mapping\n",
    "ORD2CHAR = {j:i for i,j in CHAR2ORD.items()}\n",
    "    \n",
    "# Character to Ordinal Encoding Mapping   \n",
    "display(pd.Series(CHAR2ORD).to_frame('Ordinal Encoding'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40ab3ea6",
   "metadata": {
    "papermill": {
     "duration": 0.023098,
     "end_time": "2023-07-21T06:40:30.216598",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.193500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Global Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2551ff55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:30.264563Z",
     "iopub.status.busy": "2023-07-21T06:40:30.264200Z",
     "iopub.status.idle": "2023-07-21T06:40:30.271751Z",
     "shell.execute_reply": "2023-07-21T06:40:30.270816Z"
    },
    "papermill": {
     "duration": 0.033921,
     "end_time": "2023-07-21T06:40:30.273738",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.239817",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# If Notebook Is Run By Committing or In Interactive Mode For Development\n",
    "IS_INTERACTIVE = os.environ['KAGGLE_KERNEL_RUN_TYPE'] == 'Interactive'\n",
    "# Verbose Setting during training\n",
    "VERBOSE = 1 if IS_INTERACTIVE else 2\n",
    "# Global Random Seed\n",
    "SEED = 42\n",
    "# Number of Frames to resize recording to\n",
    "N_TARGET_FRAMES = 128\n",
    "# Global debug flag, takes subset of train\n",
    "DEBUG = False\n",
    "# Number of Unique Characters To Predict + Pad Token + SOS Token + EOS Token\n",
    "N_UNIQUE_CHARACTERS0 = len(CHAR2ORD)\n",
    "N_UNIQUE_CHARACTERS = len(CHAR2ORD) + 1 + 1 + 1\n",
    "PAD_TOKEN = len(CHAR2ORD) # Padding\n",
    "SOS_TOKEN = len(CHAR2ORD) + 1 # Start Of Sentence\n",
    "EOS_TOKEN = len(CHAR2ORD) + 2 # End Of Sentence\n",
    "# Whether to use 10% of data for validation\n",
    "USE_VAL = False\n",
    "# Batch Size\n",
    "BATCH_SIZE = 64\n",
    "# Number of Epochs to Train for\n",
    "N_EPOCHS = 2 if IS_INTERACTIVE else 100\n",
    "# Number of Warmup Epochs in Learning Rate Scheduler\n",
    "N_WARMUP_EPOCHS = 10\n",
    "# Maximum Learning Rate\n",
    "LR_MAX = 1e-3\n",
    "# Weight Decay Ratio as Ratio of Learning Rate\n",
    "WD_RATIO = 0.05\n",
    "# Length of Phrase + EOS Token\n",
    "MAX_PHRASE_LENGTH = 31 + 1\n",
    "# Whether to Train The model\n",
    "TRAIN_MODEL = True\n",
    "# Whether to Load Pretrained Weights\n",
    "LOAD_WEIGHTS = False\n",
    "# Learning Rate Warmup Method [log,exp]\n",
    "WARMUP_METHOD = 'exp'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "797199d1",
   "metadata": {
    "papermill": {
     "duration": 0.023159,
     "end_time": "2023-07-21T06:40:30.320549",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.297390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Plot Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "483e1df8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:30.370400Z",
     "iopub.status.busy": "2023-07-21T06:40:30.368562Z",
     "iopub.status.idle": "2023-07-21T06:40:30.376110Z",
     "shell.execute_reply": "2023-07-21T06:40:30.375212Z"
    },
    "papermill": {
     "duration": 0.034268,
     "end_time": "2023-07-21T06:40:30.378130",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.343862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# MatplotLib Global Settings\n",
    "mpl.rcParams.update(mpl.rcParamsDefault)\n",
    "mpl.rcParams['xtick.labelsize'] = 16\n",
    "mpl.rcParams['ytick.labelsize'] = 16\n",
    "mpl.rcParams['axes.labelsize'] = 18\n",
    "mpl.rcParams['axes.titlesize'] = 24"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca121b8c",
   "metadata": {
    "papermill": {
     "duration": 0.023212,
     "end_time": "2023-07-21T06:40:30.424693",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.401481",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f198e76c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:30.472917Z",
     "iopub.status.busy": "2023-07-21T06:40:30.472281Z",
     "iopub.status.idle": "2023-07-21T06:40:30.675826Z",
     "shell.execute_reply": "2023-07-21T06:40:30.674831Z"
    },
    "papermill": {
     "duration": 0.229943,
     "end_time": "2023-07-21T06:40:30.677967",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.448024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N_SAMPLES: 67208\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 67208 entries, 0 to 67207\n",
      "Data columns (total 5 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   path            67208 non-null  object\n",
      " 1   file_id         67208 non-null  int64 \n",
      " 2   sequence_id     67208 non-null  int64 \n",
      " 3   participant_id  67208 non-null  int64 \n",
      " 4   phrase          67208 non-null  object\n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 2.6+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>file_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>participant_id</th>\n",
       "      <th>phrase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>train_landmarks/5414471.parquet</td>\n",
       "      <td>5414471</td>\n",
       "      <td>1816796431</td>\n",
       "      <td>217</td>\n",
       "      <td>3 creekhouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>train_landmarks/5414471.parquet</td>\n",
       "      <td>5414471</td>\n",
       "      <td>1816825349</td>\n",
       "      <td>107</td>\n",
       "      <td>scales/kuhaylah</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>train_landmarks/5414471.parquet</td>\n",
       "      <td>5414471</td>\n",
       "      <td>1816909464</td>\n",
       "      <td>1</td>\n",
       "      <td>1383 william lanier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>train_landmarks/5414471.parquet</td>\n",
       "      <td>5414471</td>\n",
       "      <td>1816967051</td>\n",
       "      <td>63</td>\n",
       "      <td>988 franklin lane</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>train_landmarks/5414471.parquet</td>\n",
       "      <td>5414471</td>\n",
       "      <td>1817123330</td>\n",
       "      <td>89</td>\n",
       "      <td>6920 northeast 661st road</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              path  file_id  sequence_id  participant_id  \\\n",
       "0  train_landmarks/5414471.parquet  5414471   1816796431             217   \n",
       "1  train_landmarks/5414471.parquet  5414471   1816825349             107   \n",
       "2  train_landmarks/5414471.parquet  5414471   1816909464               1   \n",
       "3  train_landmarks/5414471.parquet  5414471   1816967051              63   \n",
       "4  train_landmarks/5414471.parquet  5414471   1817123330              89   \n",
       "\n",
       "                      phrase  \n",
       "0               3 creekhouse  \n",
       "1            scales/kuhaylah  \n",
       "2        1383 william lanier  \n",
       "3          988 franklin lane  \n",
       "4  6920 northeast 661st road  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Read Train DataFrame\n",
    "if DEBUG:\n",
    "    train = pd.read_csv('/kaggle/input/asl-fingerspelling/train.csv').head(5000)\n",
    "else:\n",
    "    train = pd.read_csv('/kaggle/input/asl-fingerspelling/train.csv')\n",
    "    \n",
    "# Set Train Indexed By sqeuence_id\n",
    "train_sequence_id = train.set_index('sequence_id')\n",
    "\n",
    "# Number Of Train Samples\n",
    "N_SAMPLES = len(train)\n",
    "print(f'N_SAMPLES: {N_SAMPLES}')\n",
    "\n",
    "display(train.info())\n",
    "display(train.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d357666c",
   "metadata": {
    "papermill": {
     "duration": 0.023528,
     "end_time": "2023-07-21T06:40:30.725788",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.702260",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# File Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1262f750",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:30.774887Z",
     "iopub.status.busy": "2023-07-21T06:40:30.774539Z",
     "iopub.status.idle": "2023-07-21T06:40:30.809278Z",
     "shell.execute_reply": "2023-07-21T06:40:30.808338Z"
    },
    "papermill": {
     "duration": 0.061866,
     "end_time": "2023-07-21T06:40:30.811433",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.749567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Get complete file path to file\n",
    "def get_file_path(path):\n",
    "    return f'/kaggle/input/asl-fingerspelling/{path}'\n",
    "\n",
    "train['file_path'] = train['path'].apply(get_file_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9144af49",
   "metadata": {
    "papermill": {
     "duration": 0.023626,
     "end_time": "2023-07-21T06:40:30.859171",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.835545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Example File Paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "70019c23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:30.908965Z",
     "iopub.status.busy": "2023-07-21T06:40:30.907975Z",
     "iopub.status.idle": "2023-07-21T06:40:30.923259Z",
     "shell.execute_reply": "2023-07-21T06:40:30.922216Z"
    },
    "papermill": {
     "duration": 0.042525,
     "end_time": "2023-07-21T06:40:30.925725",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.883200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 10 Inference Pickle Files\n"
     ]
    }
   ],
   "source": [
    "# Unique Parquet Files\n",
    "INFERENCE_FILE_PATHS = pd.Series(\n",
    "        glob.glob('/kaggle/input/aslfr-preprocessing-dataset/train_landmark_subsets/*')\n",
    "    )\n",
    "\n",
    "print(f'Found {len(INFERENCE_FILE_PATHS)} Inference Pickle Files')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e56c6762",
   "metadata": {
    "papermill": {
     "duration": 0.023752,
     "end_time": "2023-07-21T06:40:30.973312",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.949560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load X/y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "35f055e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:40:31.022283Z",
     "iopub.status.busy": "2023-07-21T06:40:31.021938Z",
     "iopub.status.idle": "2023-07-21T06:41:11.003391Z",
     "shell.execute_reply": "2023-07-21T06:41:11.002359Z"
    },
    "papermill": {
     "duration": 40.028568,
     "end_time": "2023-07-21T06:41:11.025849",
     "exception": false,
     "start_time": "2023-07-21T06:40:30.997281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (61955, 128, 164)\n"
     ]
    }
   ],
   "source": [
    "# Train/Validation\n",
    "if USE_VAL:\n",
    "    # TRAIN\n",
    "    X_train = np.load('/kaggle/input/aslfr-preprocessing-dataset/X_train.npy')\n",
    "    y_train = np.load('/kaggle/input/aslfr-preprocessing-dataset/y_train.npy')[:,:MAX_PHRASE_LENGTH]\n",
    "    N_TRAIN_SAMPLES = len(X_train)\n",
    "    # VAL\n",
    "    X_val = np.load('/kaggle/input/aslfr-preprocessing-dataset/X_val.npy')\n",
    "    y_val = np.load('/kaggle/input/aslfr-preprocessing-dataset/y_val.npy')[:,:MAX_PHRASE_LENGTH]\n",
    "    N_VAL_SAMPLES = len(X_val)\n",
    "    # Shapes\n",
    "    print(f'X_train shape: {X_train.shape}, X_val shape: {X_val.shape}')\n",
    "# Train On All Data\n",
    "else:\n",
    "    # TRAIN\n",
    "    X_train = np.load('/kaggle/input/aslfr-preprocessing-dataset/X.npy')\n",
    "    y_train = np.load('/kaggle/input/aslfr-preprocessing-dataset/y.npy')[:,:MAX_PHRASE_LENGTH]\n",
    "    N_TRAIN_SAMPLES = len(X_train)\n",
    "    print(f'X_train shape: {X_train.shape}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db93decd",
   "metadata": {
    "papermill": {
     "duration": 0.023667,
     "end_time": "2023-07-21T06:41:11.073467",
     "exception": false,
     "start_time": "2023-07-21T06:41:11.049800",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Example Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0a2da0e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:11.122641Z",
     "iopub.status.busy": "2023-07-21T06:41:11.122307Z",
     "iopub.status.idle": "2023-07-21T06:41:11.225347Z",
     "shell.execute_reply": "2023-07-21T06:41:11.224395Z"
    },
    "papermill": {
     "duration": 0.13006,
     "end_time": "2023-07-21T06:41:11.227619",
     "exception": false,
     "start_time": "2023-07-21T06:41:11.097559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Example Batch For Debugging\n",
    "N_EXAMPLE_BATCH_SAMPLES = 1024\n",
    "N_EXAMPLE_BATCH_SAMPLES_SMALL = 32\n",
    "# Example Batch\n",
    "X_batch = {\n",
    "    'frames': np.copy(X_train[:N_EXAMPLE_BATCH_SAMPLES]),\n",
    "    'phrase': np.copy(y_train[:N_EXAMPLE_BATCH_SAMPLES]),\n",
    "#     'phrase_type': np.copy(y_phrase_type_train[:N_EXAMPLE_BATCH_SAMPLES]),\n",
    "}\n",
    "y_batch = np.copy(y_train[:N_EXAMPLE_BATCH_SAMPLES])\n",
    "# Small Example Batch\n",
    "X_batch_small = {\n",
    "    'frames': np.copy(X_train[:N_EXAMPLE_BATCH_SAMPLES_SMALL]),\n",
    "    'phrase': np.copy(y_train[:N_EXAMPLE_BATCH_SAMPLES_SMALL]),\n",
    "#     'phrase_type': np.copy(y_phrase_type_train[:N_EXAMPLE_BATCH_SAMPLES_SMALL]),\n",
    "}\n",
    "y_batch_small = np.copy(y_train[:N_EXAMPLE_BATCH_SAMPLES_SMALL])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "484e1c34",
   "metadata": {
    "papermill": {
     "duration": 0.023636,
     "end_time": "2023-07-21T06:41:11.275604",
     "exception": false,
     "start_time": "2023-07-21T06:41:11.251968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Example Parquet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "011b287a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:11.325988Z",
     "iopub.status.busy": "2023-07-21T06:41:11.325012Z",
     "iopub.status.idle": "2023-07-21T06:41:12.705820Z",
     "shell.execute_reply": "2023-07-21T06:41:12.703788Z"
    },
    "papermill": {
     "duration": 1.408455,
     "end_time": "2023-07-21T06:41:12.708039",
     "exception": false,
     "start_time": "2023-07-21T06:41:11.299584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Unique Recording: 1000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x_left_hand_0</th>\n",
       "      <th>x_left_hand_1</th>\n",
       "      <th>x_left_hand_2</th>\n",
       "      <th>x_left_hand_3</th>\n",
       "      <th>x_left_hand_4</th>\n",
       "      <th>x_left_hand_5</th>\n",
       "      <th>x_left_hand_6</th>\n",
       "      <th>x_left_hand_7</th>\n",
       "      <th>x_left_hand_8</th>\n",
       "      <th>x_left_hand_9</th>\n",
       "      <th>...</th>\n",
       "      <th>y_face_314</th>\n",
       "      <th>y_face_317</th>\n",
       "      <th>y_face_318</th>\n",
       "      <th>y_face_321</th>\n",
       "      <th>y_face_324</th>\n",
       "      <th>y_face_375</th>\n",
       "      <th>y_face_402</th>\n",
       "      <th>y_face_405</th>\n",
       "      <th>y_face_409</th>\n",
       "      <th>y_face_415</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sequence_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1816796431</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.551424</td>\n",
       "      <td>0.538415</td>\n",
       "      <td>0.539000</td>\n",
       "      <td>0.546458</td>\n",
       "      <td>0.539715</td>\n",
       "      <td>0.543958</td>\n",
       "      <td>0.538425</td>\n",
       "      <td>0.549351</td>\n",
       "      <td>0.538230</td>\n",
       "      <td>0.540015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1816796431</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.550706</td>\n",
       "      <td>0.538216</td>\n",
       "      <td>0.538723</td>\n",
       "      <td>0.545990</td>\n",
       "      <td>0.539296</td>\n",
       "      <td>0.543357</td>\n",
       "      <td>0.538225</td>\n",
       "      <td>0.548827</td>\n",
       "      <td>0.537376</td>\n",
       "      <td>0.539256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1816796431</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.550613</td>\n",
       "      <td>0.537836</td>\n",
       "      <td>0.538564</td>\n",
       "      <td>0.545949</td>\n",
       "      <td>0.539212</td>\n",
       "      <td>0.543279</td>\n",
       "      <td>0.537961</td>\n",
       "      <td>0.548796</td>\n",
       "      <td>0.537360</td>\n",
       "      <td>0.539332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1816796431</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.549740</td>\n",
       "      <td>0.536994</td>\n",
       "      <td>0.538449</td>\n",
       "      <td>0.545622</td>\n",
       "      <td>0.539666</td>\n",
       "      <td>0.543694</td>\n",
       "      <td>0.537328</td>\n",
       "      <td>0.548015</td>\n",
       "      <td>0.538301</td>\n",
       "      <td>0.539954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1816796431</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.550614</td>\n",
       "      <td>0.538677</td>\n",
       "      <td>0.540376</td>\n",
       "      <td>0.547104</td>\n",
       "      <td>0.541524</td>\n",
       "      <td>0.545222</td>\n",
       "      <td>0.539203</td>\n",
       "      <td>0.549211</td>\n",
       "      <td>0.539734</td>\n",
       "      <td>0.541707</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 164 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             x_left_hand_0  x_left_hand_1  x_left_hand_2  x_left_hand_3  \\\n",
       "sequence_id                                                               \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "\n",
       "             x_left_hand_4  x_left_hand_5  x_left_hand_6  x_left_hand_7  \\\n",
       "sequence_id                                                               \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "1816796431             NaN            NaN            NaN            NaN   \n",
       "\n",
       "             x_left_hand_8  x_left_hand_9  ...  y_face_314  y_face_317  \\\n",
       "sequence_id                                ...                           \n",
       "1816796431             NaN            NaN  ...    0.551424    0.538415   \n",
       "1816796431             NaN            NaN  ...    0.550706    0.538216   \n",
       "1816796431             NaN            NaN  ...    0.550613    0.537836   \n",
       "1816796431             NaN            NaN  ...    0.549740    0.536994   \n",
       "1816796431             NaN            NaN  ...    0.550614    0.538677   \n",
       "\n",
       "             y_face_318  y_face_321  y_face_324  y_face_375  y_face_402  \\\n",
       "sequence_id                                                               \n",
       "1816796431     0.539000    0.546458    0.539715    0.543958    0.538425   \n",
       "1816796431     0.538723    0.545990    0.539296    0.543357    0.538225   \n",
       "1816796431     0.538564    0.545949    0.539212    0.543279    0.537961   \n",
       "1816796431     0.538449    0.545622    0.539666    0.543694    0.537328   \n",
       "1816796431     0.540376    0.547104    0.541524    0.545222    0.539203   \n",
       "\n",
       "             y_face_405  y_face_409  y_face_415  \n",
       "sequence_id                                      \n",
       "1816796431     0.549351    0.538230    0.540015  \n",
       "1816796431     0.548827    0.537376    0.539256  \n",
       "1816796431     0.548796    0.537360    0.539332  \n",
       "1816796431     0.548015    0.538301    0.539954  \n",
       "1816796431     0.549211    0.539734    0.541707  \n",
       "\n",
       "[5 rows x 164 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Read First Parquet File\n",
    "# example_parquet_df = pd.read_parquet(train['file_path'][0])\n",
    "example_parquet_df = pd.read_parquet(INFERENCE_FILE_PATHS[0])\n",
    "\n",
    "# Each parquet file contains 1000 recordings\n",
    "print(f'# Unique Recording: {example_parquet_df.index.nunique()}')\n",
    "# Display DataFrame layout\n",
    "display(example_parquet_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02abe4af",
   "metadata": {
    "papermill": {
     "duration": 0.02433,
     "end_time": "2023-07-21T06:41:12.757556",
     "exception": false,
     "start_time": "2023-07-21T06:41:12.733226",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Landmark Indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6800e81a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:12.808195Z",
     "iopub.status.busy": "2023-07-21T06:41:12.807509Z",
     "iopub.status.idle": "2023-07-21T06:41:12.818079Z",
     "shell.execute_reply": "2023-07-21T06:41:12.817132Z"
    },
    "papermill": {
     "duration": 0.038465,
     "end_time": "2023-07-21T06:41:12.820427",
     "exception": false,
     "start_time": "2023-07-21T06:41:12.781962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Get indices in original dataframe\n",
    "def get_idxs(df, words_pos, words_neg=[], ret_names=True, idxs_pos=None):\n",
    "    idxs = []\n",
    "    names = []\n",
    "    for w in words_pos:\n",
    "        for col_idx, col in enumerate(example_parquet_df.columns):\n",
    "            # Exclude Non Landmark Columns\n",
    "            if col in ['frame']:\n",
    "                continue\n",
    "                \n",
    "            col_idx = int(col.split('_')[-1])\n",
    "            # Check if column name contains all words\n",
    "            if (w in col) and (idxs_pos is None or col_idx in idxs_pos) and all([w not in col for w in words_neg]):\n",
    "                idxs.append(col_idx)\n",
    "                names.append(col)\n",
    "    # Convert to Numpy arrays\n",
    "    idxs = np.array(idxs)\n",
    "    names = np.array(names)\n",
    "    # Returns either both column indices and names\n",
    "    if ret_names:\n",
    "        return idxs, names\n",
    "    # Or only columns indices\n",
    "    else:\n",
    "        return idxs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "91d108e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:12.870156Z",
     "iopub.status.busy": "2023-07-21T06:41:12.869865Z",
     "iopub.status.idle": "2023-07-21T06:41:12.879078Z",
     "shell.execute_reply": "2023-07-21T06:41:12.878221Z"
    },
    "papermill": {
     "duration": 0.036667,
     "end_time": "2023-07-21T06:41:12.881450",
     "exception": false,
     "start_time": "2023-07-21T06:41:12.844783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N_COLS0: 164\n"
     ]
    }
   ],
   "source": [
    "# Lips Landmark Face Ids\n",
    "LIPS_LANDMARK_IDXS = np.array([\n",
    "        61, 185, 40, 39, 37, 0, 267, 269, 270, 409,\n",
    "        291, 146, 91, 181, 84, 17, 314, 405, 321, 375,\n",
    "        78, 191, 80, 81, 82, 13, 312, 311, 310, 415,\n",
    "        95, 88, 178, 87, 14, 317, 402, 318, 324, 308,\n",
    "    ])\n",
    "\n",
    "# Landmark Indices for Left/Right hand without z axis in raw data\n",
    "LEFT_HAND_IDXS0, LEFT_HAND_NAMES0 = get_idxs(example_parquet_df, ['left_hand'], ['z'])\n",
    "RIGHT_HAND_IDXS0, RIGHT_HAND_NAMES0 = get_idxs(example_parquet_df, ['right_hand'], ['z'])\n",
    "LIPS_IDXS0, LIPS_NAMES0 = get_idxs(example_parquet_df, ['face'], ['z'], idxs_pos=LIPS_LANDMARK_IDXS)\n",
    "COLUMNS0 = np.concatenate((LEFT_HAND_NAMES0, RIGHT_HAND_NAMES0, LIPS_NAMES0))\n",
    "N_COLS0 = len(COLUMNS0)\n",
    "# Only X/Y axes are used\n",
    "N_DIMS0 = 2\n",
    "\n",
    "print(f'N_COLS0: {N_COLS0}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f8d94dba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:12.931911Z",
     "iopub.status.busy": "2023-07-21T06:41:12.931128Z",
     "iopub.status.idle": "2023-07-21T06:41:12.940527Z",
     "shell.execute_reply": "2023-07-21T06:41:12.939632Z"
    },
    "papermill": {
     "duration": 0.036432,
     "end_time": "2023-07-21T06:41:12.942442",
     "exception": false,
     "start_time": "2023-07-21T06:41:12.906010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N_COLS: 164\n"
     ]
    }
   ],
   "source": [
    "# Landmark Indices in subset of dataframe with only COLUMNS selected\n",
    "LEFT_HAND_IDXS = np.argwhere(np.isin(COLUMNS0, LEFT_HAND_NAMES0)).squeeze()\n",
    "RIGHT_HAND_IDXS = np.argwhere(np.isin(COLUMNS0, RIGHT_HAND_NAMES0)).squeeze()\n",
    "LIPS_IDXS = np.argwhere(np.isin(COLUMNS0, LIPS_NAMES0)).squeeze()\n",
    "HAND_IDXS = np.concatenate((LEFT_HAND_IDXS, RIGHT_HAND_IDXS), axis=0)\n",
    "N_COLS = N_COLS0\n",
    "# Only X/Y axes are used\n",
    "N_DIMS = 2\n",
    "\n",
    "print(f'N_COLS: {N_COLS}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "42c671e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:12.997341Z",
     "iopub.status.busy": "2023-07-21T06:41:12.996409Z",
     "iopub.status.idle": "2023-07-21T06:41:13.002873Z",
     "shell.execute_reply": "2023-07-21T06:41:13.001887Z"
    },
    "papermill": {
     "duration": 0.037986,
     "end_time": "2023-07-21T06:41:13.005224",
     "exception": false,
     "start_time": "2023-07-21T06:41:12.967238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Indices in processed data by axes with only dominant hand\n",
    "HAND_X_IDXS = np.array(\n",
    "        [idx for idx, name in enumerate(LEFT_HAND_NAMES0) if 'x' in name]\n",
    "    ).squeeze()\n",
    "HAND_Y_IDXS = np.array(\n",
    "        [idx for idx, name in enumerate(LEFT_HAND_NAMES0) if 'y' in name]\n",
    "    ).squeeze()\n",
    "# Names in processed data by axes\n",
    "HAND_X_NAMES = LEFT_HAND_NAMES0[HAND_X_IDXS]\n",
    "HAND_Y_NAMES = LEFT_HAND_NAMES0[HAND_Y_IDXS]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "510a9dac",
   "metadata": {
    "papermill": {
     "duration": 0.024329,
     "end_time": "2023-07-21T06:41:13.055252",
     "exception": false,
     "start_time": "2023-07-21T06:41:13.030923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Mean/STD Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "16bee075",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:13.107557Z",
     "iopub.status.busy": "2023-07-21T06:41:13.107173Z",
     "iopub.status.idle": "2023-07-21T06:41:13.121400Z",
     "shell.execute_reply": "2023-07-21T06:41:13.120433Z"
    },
    "papermill": {
     "duration": 0.043631,
     "end_time": "2023-07-21T06:41:13.123604",
     "exception": false,
     "start_time": "2023-07-21T06:41:13.079973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Mean/Standard Deviations of data used for normalizing\n",
    "MEANS = np.load('/kaggle/input/aslfr-preprocessing-dataset/MEANS.npy').reshape(-1)\n",
    "STDS = np.load('/kaggle/input/aslfr-preprocessing-dataset/STDS.npy').reshape(-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfc1052d",
   "metadata": {
    "papermill": {
     "duration": 0.024241,
     "end_time": "2023-07-21T06:41:13.172540",
     "exception": false,
     "start_time": "2023-07-21T06:41:13.148299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Tensorflow Preprocessing Layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b2285519",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:13.223521Z",
     "iopub.status.busy": "2023-07-21T06:41:13.222616Z",
     "iopub.status.idle": "2023-07-21T06:41:16.305783Z",
     "shell.execute_reply": "2023-07-21T06:41:16.304591Z"
    },
    "papermill": {
     "duration": 3.111198,
     "end_time": "2023-07-21T06:41:16.308284",
     "exception": false,
     "start_time": "2023-07-21T06:41:13.197086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "    Tensorflow layer to process data in TFLite\n",
    "    Data needs to be processed in the model itself, so we can not use Python\n",
    "\"\"\" \n",
    "class PreprocessLayer(tf.keras.layers.Layer):\n",
    "    def __init__(self):\n",
    "        super(PreprocessLayer, self).__init__()\n",
    "        self.normalisation_correction = tf.constant(\n",
    "                    # Add 0.50 to x coordinates of left hand (original right hand) and substract 0.50 of right hand (original left hand)\n",
    "                     [0.50 if 'x' in name else 0.00 for name in LEFT_HAND_NAMES0],\n",
    "                dtype=tf.float32,\n",
    "            )\n",
    "    \n",
    "    @tf.function(\n",
    "        input_signature=(tf.TensorSpec(shape=[None,N_COLS0], dtype=tf.float32),),\n",
    "    )\n",
    "    def call(self, data0, resize=True):\n",
    "        # Fill NaN Values With 0\n",
    "        data = tf.where(tf.math.is_nan(data0), 0.0, data0)\n",
    "        \n",
    "        # Hacky\n",
    "        data = data[None]\n",
    "        \n",
    "        # Empty Hand Frame Filtering\n",
    "        hands = tf.slice(data, [0,0,0], [-1, -1, 84])\n",
    "        hands = tf.abs(hands)\n",
    "        mask = tf.reduce_sum(hands, axis=2)\n",
    "        mask = tf.not_equal(mask, 0)\n",
    "        data = data[mask][None]\n",
    "        \n",
    "        # Pad Zeros\n",
    "        N_FRAMES = len(data[0])\n",
    "        if N_FRAMES < N_TARGET_FRAMES:\n",
    "            data = tf.concat((\n",
    "                data,\n",
    "                tf.zeros([1,N_TARGET_FRAMES-N_FRAMES,N_COLS], dtype=tf.float32)\n",
    "            ), axis=1)\n",
    "        # Downsample\n",
    "        data = tf.image.resize(\n",
    "            data,\n",
    "            [1, N_TARGET_FRAMES],\n",
    "            method=tf.image.ResizeMethod.BILINEAR,\n",
    "        )\n",
    "        \n",
    "        # Squeeze Batch Dimension\n",
    "        data = tf.squeeze(data, axis=[0])\n",
    "        \n",
    "        return data\n",
    "    \n",
    "preprocess_layer = PreprocessLayer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0cf0aa5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.361910Z",
     "iopub.status.busy": "2023-07-21T06:41:16.361583Z",
     "iopub.status.idle": "2023-07-21T06:41:16.367337Z",
     "shell.execute_reply": "2023-07-21T06:41:16.366440Z"
    },
    "papermill": {
     "duration": 0.034827,
     "end_time": "2023-07-21T06:41:16.369399",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.334572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Function To Test Preprocessing Layer\n",
    "def test_preprocess_layer():\n",
    "    demo_sequence_id = example_parquet_df.index.unique()[15]\n",
    "    demo_raw_data = example_parquet_df.loc[demo_sequence_id, COLUMNS0]\n",
    "    data = preprocess_layer(demo_raw_data)\n",
    "\n",
    "    print(f'demo_raw_data shape: {demo_raw_data.shape}')\n",
    "    print(f'data shape: {data.shape}')\n",
    "    \n",
    "    return data\n",
    "    \n",
    "if IS_INTERACTIVE:\n",
    "    data = test_preprocess_layer()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b639ac42",
   "metadata": {
    "papermill": {
     "duration": 0.025205,
     "end_time": "2023-07-21T06:41:16.419097",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.393892",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d113e881",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.468866Z",
     "iopub.status.busy": "2023-07-21T06:41:16.468583Z",
     "iopub.status.idle": "2023-07-21T06:41:16.473936Z",
     "shell.execute_reply": "2023-07-21T06:41:16.473074Z"
    },
    "papermill": {
     "duration": 0.032485,
     "end_time": "2023-07-21T06:41:16.475923",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.443438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train Dataset Iterator\n",
    "def get_train_dataset(X, y, batch_size=BATCH_SIZE):\n",
    "    sample_idxs = np.arange(len(X))\n",
    "    while True:\n",
    "        # Get random indices\n",
    "        random_sample_idxs = np.random.choice(sample_idxs, batch_size)\n",
    "        \n",
    "        inputs = {\n",
    "            'frames': X[random_sample_idxs],\n",
    "            'phrase': y[random_sample_idxs],\n",
    "        }\n",
    "        outputs = y[random_sample_idxs]\n",
    "        \n",
    "        yield inputs, outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0d036d64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.526705Z",
     "iopub.status.busy": "2023-07-21T06:41:16.526380Z",
     "iopub.status.idle": "2023-07-21T06:41:16.530611Z",
     "shell.execute_reply": "2023-07-21T06:41:16.529736Z"
    },
    "papermill": {
     "duration": 0.032001,
     "end_time": "2023-07-21T06:41:16.532572",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.500571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train Dataset\n",
    "train_dataset = get_train_dataset(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b5e14d6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.583833Z",
     "iopub.status.busy": "2023-07-21T06:41:16.582865Z",
     "iopub.status.idle": "2023-07-21T06:41:16.588202Z",
     "shell.execute_reply": "2023-07-21T06:41:16.587304Z"
    },
    "papermill": {
     "duration": 0.033046,
     "end_time": "2023-07-21T06:41:16.590339",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.557293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAIN_STEPS_PER_EPOCH: 969\n"
     ]
    }
   ],
   "source": [
    "# Training Steps Per Epoch\n",
    "TRAIN_STEPS_PER_EPOCH = math.ceil(N_TRAIN_SAMPLES / BATCH_SIZE)\n",
    "print(f'TRAIN_STEPS_PER_EPOCH: {TRAIN_STEPS_PER_EPOCH}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9579f50f",
   "metadata": {
    "papermill": {
     "duration": 0.024695,
     "end_time": "2023-07-21T06:41:16.640094",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.615399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Validation Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6f2ee471",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.699698Z",
     "iopub.status.busy": "2023-07-21T06:41:16.699253Z",
     "iopub.status.idle": "2023-07-21T06:41:16.706424Z",
     "shell.execute_reply": "2023-07-21T06:41:16.705493Z"
    },
    "papermill": {
     "duration": 0.04512,
     "end_time": "2023-07-21T06:41:16.710196",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.665076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Validation Set\n",
    "def get_val_dataset(X, y, batch_size=BATCH_SIZE):\n",
    "    offsets = np.arange(0, len(X), batch_size)\n",
    "    while True:\n",
    "        # Iterate over whole validation set\n",
    "        for offset in offsets:\n",
    "            inputs = {\n",
    "                'frames': X[offset:offset+batch_size],\n",
    "                'phrase': y[offset:offset+batch_size],\n",
    "            }\n",
    "            outputs = y[offset:offset+batch_size]\n",
    "\n",
    "            yield inputs, outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "539aac6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.774569Z",
     "iopub.status.busy": "2023-07-21T06:41:16.773507Z",
     "iopub.status.idle": "2023-07-21T06:41:16.778649Z",
     "shell.execute_reply": "2023-07-21T06:41:16.777758Z"
    },
    "papermill": {
     "duration": 0.033113,
     "end_time": "2023-07-21T06:41:16.780699",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.747586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Validation Dataset\n",
    "if USE_VAL:\n",
    "    val_dataset = get_val_dataset(X_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b36d6280",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.832109Z",
     "iopub.status.busy": "2023-07-21T06:41:16.831774Z",
     "iopub.status.idle": "2023-07-21T06:41:16.836502Z",
     "shell.execute_reply": "2023-07-21T06:41:16.835602Z"
    },
    "papermill": {
     "duration": 0.033077,
     "end_time": "2023-07-21T06:41:16.838464",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.805387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if USE_VAL:\n",
    "    N_VAL_STEPS_PER_EPOCH = math.ceil(N_VAL_SAMPLES / BATCH_SIZE)\n",
    "    print(f'N_VAL_STEPS_PER_EPOCH: {N_VAL_STEPS_PER_EPOCH}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cae1238",
   "metadata": {
    "papermill": {
     "duration": 0.035145,
     "end_time": "2023-07-21T06:41:16.898429",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.863284",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "654030cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:16.983939Z",
     "iopub.status.busy": "2023-07-21T06:41:16.983578Z",
     "iopub.status.idle": "2023-07-21T06:41:16.989760Z",
     "shell.execute_reply": "2023-07-21T06:41:16.988836Z"
    },
    "papermill": {
     "duration": 0.047486,
     "end_time": "2023-07-21T06:41:16.991678",
     "exception": false,
     "start_time": "2023-07-21T06:41:16.944192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Epsilon value for layer normalisation\n",
    "LAYER_NORM_EPS = 1e-6\n",
    "\n",
    "# final embedding and transformer embedding size\n",
    "UNITS_ENCODER = 384\n",
    "UNITS_DECODER = 256\n",
    "\n",
    "# Transformer\n",
    "NUM_BLOCKS_ENCODER = 3\n",
    "NUM_BLOCKS_DECODER = 2\n",
    "NUM_HEADS = 4\n",
    "MLP_RATIO = 2\n",
    "\n",
    "# Dropout\n",
    "EMBEDDING_DROPOUT = 0.00\n",
    "MLP_DROPOUT_RATIO = 0.30\n",
    "MHA_DROPOUT_RATIO = 0.20\n",
    "CLASSIFIER_DROPOUT_RATIO = 0.10\n",
    "\n",
    "# Initiailizers\n",
    "INIT_HE_UNIFORM = tf.keras.initializers.he_uniform\n",
    "INIT_GLOROT_UNIFORM = tf.keras.initializers.glorot_uniform\n",
    "INIT_ZEROS = tf.keras.initializers.constant(0.0)\n",
    "# Activations\n",
    "GELU = tf.keras.activations.gelu"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f4b67af",
   "metadata": {
    "papermill": {
     "duration": 0.024391,
     "end_time": "2023-07-21T06:41:17.043213",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.018822",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Landmark Embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d5d0f572",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.093454Z",
     "iopub.status.busy": "2023-07-21T06:41:17.093131Z",
     "iopub.status.idle": "2023-07-21T06:41:17.101594Z",
     "shell.execute_reply": "2023-07-21T06:41:17.100702Z"
    },
    "papermill": {
     "duration": 0.036027,
     "end_time": "2023-07-21T06:41:17.103588",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.067561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Embeds a landmark using fully connected layers\n",
    "class LandmarkEmbedding(tf.keras.Model):\n",
    "    def __init__(self, units, name):\n",
    "        super(LandmarkEmbedding, self).__init__(name=f'{name}_embedding')\n",
    "        self.units = units\n",
    "        self.supports_masking = True\n",
    "        \n",
    "    def build(self, input_shape):\n",
    "        # Embedding for missing landmark in frame, initizlied with zeros\n",
    "        self.empty_embedding = self.add_weight(\n",
    "            name=f'{self.name}_empty_embedding',\n",
    "            shape=[self.units],\n",
    "            initializer=INIT_ZEROS,\n",
    "        )\n",
    "        # Embedding\n",
    "        self.dense = tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(self.units, name=f'{self.name}_dense_1', use_bias=False, kernel_initializer=INIT_GLOROT_UNIFORM, activation=GELU),\n",
    "            tf.keras.layers.Dense(self.units, name=f'{self.name}_dense_2', use_bias=False, kernel_initializer=INIT_HE_UNIFORM),\n",
    "        ], name=f'{self.name}_dense')\n",
    "\n",
    "    def call(self, x):\n",
    "        return tf.where(\n",
    "                # Checks whether landmark is missing in frame\n",
    "                tf.reduce_sum(x, axis=2, keepdims=True) == 0,\n",
    "                # If so, the empty embedding is used\n",
    "                self.empty_embedding,\n",
    "                # Otherwise the landmark data is embedded\n",
    "                self.dense(x),\n",
    "            )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4a4d852",
   "metadata": {
    "papermill": {
     "duration": 0.02473,
     "end_time": "2023-07-21T06:41:17.152745",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.128015",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ffc8ee34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.205691Z",
     "iopub.status.busy": "2023-07-21T06:41:17.204782Z",
     "iopub.status.idle": "2023-07-21T06:41:17.212998Z",
     "shell.execute_reply": "2023-07-21T06:41:17.212112Z"
    },
    "papermill": {
     "duration": 0.037706,
     "end_time": "2023-07-21T06:41:17.215005",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.177299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creates embedding for each frame\n",
    "class Embedding(tf.keras.Model):\n",
    "    def __init__(self):\n",
    "        super(Embedding, self).__init__()\n",
    "        self.supports_masking = True\n",
    "    \n",
    "    def build(self, input_shape):\n",
    "        # Positional embedding for each frame index\n",
    "        self.positional_embedding = tf.Variable(\n",
    "            initial_value=tf.zeros([N_TARGET_FRAMES, UNITS_ENCODER], dtype=tf.float32),\n",
    "            trainable=True,\n",
    "            name='embedding_positional_encoder',\n",
    "        )\n",
    "        # Embedding layer for Landmarks\n",
    "        self.dominant_hand_embedding = LandmarkEmbedding(UNITS_ENCODER, 'dominant_hand')\n",
    "\n",
    "    def call(self, x, training=False):\n",
    "        # Normalize\n",
    "        x = tf.where(\n",
    "                tf.math.equal(x, 0.0),\n",
    "                0.0,\n",
    "                (x - MEANS) / STDS,\n",
    "            )\n",
    "        # Dominant Hand\n",
    "        x = self.dominant_hand_embedding(x)\n",
    "        # Add Positional Encoding\n",
    "        x = x + self.positional_embedding\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd1ecdcd",
   "metadata": {
    "papermill": {
     "duration": 0.024179,
     "end_time": "2023-07-21T06:41:17.263753",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.239574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Transformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f92c06b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.315135Z",
     "iopub.status.busy": "2023-07-21T06:41:17.314087Z",
     "iopub.status.idle": "2023-07-21T06:41:17.327495Z",
     "shell.execute_reply": "2023-07-21T06:41:17.326582Z"
    },
    "papermill": {
     "duration": 0.041344,
     "end_time": "2023-07-21T06:41:17.329573",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.288229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# based on: https://stackoverflow.com/questions/67342988/verifying-the-implementation-of-multihead-attention-in-transformer\n",
    "# replaced softmax with softmax layer to support masked softmax\n",
    "def scaled_dot_product(q,k,v, softmax, attention_mask):\n",
    "    #calculates Q . K(transpose)\n",
    "    qkt = tf.matmul(q,k,transpose_b=True)\n",
    "    #caculates scaling factor\n",
    "    dk = tf.math.sqrt(tf.cast(q.shape[-1],dtype=tf.float32))\n",
    "    scaled_qkt = qkt/dk\n",
    "    softmax = softmax(scaled_qkt, mask=attention_mask)\n",
    "    z = tf.matmul(softmax,v)\n",
    "    #shape: (m,Tx,depth), same shape as q,k,v\n",
    "    return z\n",
    "\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self,d_model, num_of_heads, dropout, d_out=None):\n",
    "        super(MultiHeadAttention,self).__init__()\n",
    "        self.d_model = d_model\n",
    "        self.num_of_heads = num_of_heads\n",
    "        self.depth = d_model//num_of_heads\n",
    "        self.wq = [tf.keras.layers.Dense(self.depth//2, use_bias=False) for i in range(num_of_heads)]\n",
    "        self.wk = [tf.keras.layers.Dense(self.depth//2, use_bias=False) for i in range(num_of_heads)]\n",
    "        self.wv = [tf.keras.layers.Dense(self.depth//2, use_bias=False) for i in range(num_of_heads)]\n",
    "        self.wo = tf.keras.layers.Dense(d_model if d_out is None else d_out, use_bias=False)\n",
    "        self.softmax = tf.keras.layers.Softmax()\n",
    "        self.do = tf.keras.layers.Dropout(dropout)\n",
    "        self.supports_masking = True\n",
    "        \n",
    "    def call(self, q, k, v, attention_mask=None, training=False):\n",
    "        \n",
    "        multi_attn = []\n",
    "        for i in range(self.num_of_heads):\n",
    "            Q = self.wq[i](q)\n",
    "            K = self.wk[i](k)\n",
    "            V = self.wv[i](v)\n",
    "            multi_attn.append(scaled_dot_product(Q,K,V, self.softmax, attention_mask))\n",
    "            \n",
    "        multi_head = tf.concat(multi_attn, axis=-1)\n",
    "        multi_head_attention = self.wo(multi_head)\n",
    "        multi_head_attention = self.do(multi_head_attention, training=training)\n",
    "        \n",
    "        return multi_head_attention"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7951dd8a",
   "metadata": {
    "papermill": {
     "duration": 0.024942,
     "end_time": "2023-07-21T06:41:17.379397",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.354455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Encoder\n",
    "\n",
    "[source](https://keras.io/examples/nlp/neural_machine_translation_with_transformer/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "88719067",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.432357Z",
     "iopub.status.busy": "2023-07-21T06:41:17.430636Z",
     "iopub.status.idle": "2023-07-21T06:41:17.444138Z",
     "shell.execute_reply": "2023-07-21T06:41:17.443198Z"
    },
    "papermill": {
     "duration": 0.042156,
     "end_time": "2023-07-21T06:41:17.446288",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.404132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Encoder based on multiple transformer blocks\n",
    "class Encoder(tf.keras.Model):\n",
    "    def __init__(self, num_blocks):\n",
    "        super(Encoder, self).__init__(name='encoder')\n",
    "        self.num_blocks = num_blocks\n",
    "        self.supports_masking = True\n",
    "    \n",
    "    def build(self, input_shape):\n",
    "        self.ln_1s = []\n",
    "        self.mhas = []\n",
    "        self.ln_2s = []\n",
    "        self.mlps = []\n",
    "        # Make Transformer Blocks\n",
    "        for i in range(self.num_blocks):\n",
    "            # First Layer Normalisation\n",
    "            self.ln_1s.append(tf.keras.layers.LayerNormalization(epsilon=LAYER_NORM_EPS))\n",
    "            # Multi Head Attention\n",
    "            self.mhas.append(MultiHeadAttention(UNITS_ENCODER, NUM_HEADS, MHA_DROPOUT_RATIO))\n",
    "            # Second Layer Normalisation\n",
    "            self.ln_2s.append(tf.keras.layers.LayerNormalization(epsilon=LAYER_NORM_EPS))\n",
    "            # Multi Layer Perception\n",
    "            self.mlps.append(tf.keras.Sequential([\n",
    "                tf.keras.layers.Dense(UNITS_ENCODER * MLP_RATIO, activation=GELU, kernel_initializer=INIT_GLOROT_UNIFORM, use_bias=False),\n",
    "                tf.keras.layers.Dropout(MLP_DROPOUT_RATIO),\n",
    "                tf.keras.layers.Dense(UNITS_ENCODER, kernel_initializer=INIT_HE_UNIFORM, use_bias=False),\n",
    "            ]))\n",
    "            # Optional Projection to Decoder Dimension\n",
    "            if UNITS_ENCODER != UNITS_DECODER:\n",
    "                self.dense_out = tf.keras.layers.Dense(UNITS_DECODER, kernel_initializer=INIT_GLOROT_UNIFORM, use_bias=False)\n",
    "                self.apply_dense_out = True\n",
    "            else:\n",
    "                self.apply_dense_out = False\n",
    "        \n",
    "    def call(self, x, x_inp, training=False):\n",
    "        # Attention mask to ignore missing frames\n",
    "        attention_mask = tf.where(tf.math.reduce_sum(x_inp, axis=[2]) == 0.0, 0.0, 1.0)\n",
    "        attention_mask = tf.expand_dims(attention_mask, axis=1)\n",
    "        attention_mask = tf.repeat(attention_mask, repeats=N_TARGET_FRAMES, axis=1)\n",
    "        # Iterate input over transformer blocks\n",
    "        for ln_1, mha, ln_2, mlp in zip(self.ln_1s, self.mhas, self.ln_2s, self.mlps):\n",
    "            x = ln_1(x + mha(x, x, x, attention_mask=attention_mask))\n",
    "            x = ln_2(x + mlp(x))\n",
    "            \n",
    "        # Optional Projection to Decoder Dimension\n",
    "        if self.apply_dense_out:\n",
    "            x = self.dense_out(x)\n",
    "    \n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f04158c",
   "metadata": {
    "papermill": {
     "duration": 0.024331,
     "end_time": "2023-07-21T06:41:17.495582",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.471251",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Decoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a0061c45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.546991Z",
     "iopub.status.busy": "2023-07-21T06:41:17.546659Z",
     "iopub.status.idle": "2023-07-21T06:41:17.564130Z",
     "shell.execute_reply": "2023-07-21T06:41:17.563284Z"
    },
    "papermill": {
     "duration": 0.046027,
     "end_time": "2023-07-21T06:41:17.566224",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.520197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Decoder based on multiple transformer blocks\n",
    "class Decoder(tf.keras.Model):\n",
    "    def __init__(self, num_blocks):\n",
    "        super(Decoder, self).__init__(name='decoder')\n",
    "        self.num_blocks = num_blocks\n",
    "        self.supports_masking = True\n",
    "    \n",
    "    def build(self, input_shape):\n",
    "        # Positional Embedding, initialized with zeros\n",
    "        self.positional_embedding = tf.Variable(\n",
    "            initial_value=tf.zeros([N_TARGET_FRAMES, UNITS_DECODER], dtype=tf.float32),\n",
    "            trainable=True,\n",
    "            name='embedding_positional_encoder',\n",
    "        )\n",
    "        # Character Embedding\n",
    "        self.char_emb = tf.keras.layers.Embedding(N_UNIQUE_CHARACTERS, UNITS_DECODER, embeddings_initializer=INIT_ZEROS)\n",
    "        # Positional Encoder MHA\n",
    "        self.pos_emb_mha = MultiHeadAttention(UNITS_DECODER, NUM_HEADS, MHA_DROPOUT_RATIO)\n",
    "        self.pos_emb_ln = tf.keras.layers.LayerNormalization(epsilon=LAYER_NORM_EPS)\n",
    "        # First Layer Normalisation\n",
    "        self.ln_1s = []\n",
    "        self.mhas = []\n",
    "        self.ln_2s = []\n",
    "        self.mlps = []\n",
    "        # Make Transformer Blocks\n",
    "        for i in range(self.num_blocks):\n",
    "            # First Layer Normalisation\n",
    "            self.ln_1s.append(tf.keras.layers.LayerNormalization(epsilon=LAYER_NORM_EPS))\n",
    "            # Multi Head Attention\n",
    "            self.mhas.append(MultiHeadAttention(UNITS_DECODER, NUM_HEADS, MHA_DROPOUT_RATIO))\n",
    "            # Second Layer Normalisation\n",
    "            self.ln_2s.append(tf.keras.layers.LayerNormalization(epsilon=LAYER_NORM_EPS))\n",
    "            # Multi Layer Perception\n",
    "            self.mlps.append(tf.keras.Sequential([\n",
    "                tf.keras.layers.Dense(UNITS_DECODER * MLP_RATIO, activation=GELU, kernel_initializer=INIT_GLOROT_UNIFORM, use_bias=False),\n",
    "                tf.keras.layers.Dropout(MLP_DROPOUT_RATIO),\n",
    "                tf.keras.layers.Dense(UNITS_DECODER, kernel_initializer=INIT_HE_UNIFORM, use_bias=False),\n",
    "            ]))\n",
    "            \n",
    "    def get_causal_attention_mask(self, B):\n",
    "        i = tf.range(N_TARGET_FRAMES)[:, tf.newaxis]\n",
    "        j = tf.range(N_TARGET_FRAMES)\n",
    "        mask = tf.cast(i >= j, dtype=tf.int32)\n",
    "        mask = tf.reshape(mask, (1, N_TARGET_FRAMES, N_TARGET_FRAMES))\n",
    "        mult = tf.concat(\n",
    "            [tf.expand_dims(B, -1), tf.constant([1, 1], dtype=tf.int32)],\n",
    "            axis=0,\n",
    "        )\n",
    "        mask = tf.tile(mask, mult)\n",
    "        mask = tf.cast(mask, tf.float32)\n",
    "        return mask\n",
    "        \n",
    "    def call(self, encoder_outputs, phrase, training=False):\n",
    "        # Batch Size\n",
    "        B = tf.shape(encoder_outputs)[0]\n",
    "        # Cast to INT32\n",
    "        phrase = tf.cast(phrase, tf.int32)\n",
    "        # Prepend SOS Token\n",
    "        phrase = tf.pad(phrase, [[0,0], [1,0]], constant_values=SOS_TOKEN, name='prepend_sos_token')\n",
    "        # Pad With PAD Token\n",
    "        phrase = tf.pad(phrase, [[0,0], [0,N_TARGET_FRAMES-MAX_PHRASE_LENGTH-1]], constant_values=PAD_TOKEN, name='append_pad_token')\n",
    "        # Causal Mask\n",
    "        causal_mask = self.get_causal_attention_mask(B)\n",
    "        # Positional Embedding\n",
    "        x = self.positional_embedding + self.char_emb(phrase)\n",
    "        # Causal Attention\n",
    "        x = self.pos_emb_ln(x + self.pos_emb_mha(x, x, x, attention_mask=causal_mask))\n",
    "        # Iterate input over transformer blocks\n",
    "        for ln_1, mha, ln_2, mlp in zip(self.ln_1s, self.mhas, self.ln_2s, self.mlps):\n",
    "            x = ln_1(x + mha(x, encoder_outputs, encoder_outputs, attention_mask=causal_mask))\n",
    "            x = ln_2(x + mlp(x))\n",
    "        # Slice 31 Characters\n",
    "        x = tf.slice(x, [0, 0, 0], [-1, MAX_PHRASE_LENGTH, -1])\n",
    "    \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a2e225d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.617175Z",
     "iopub.status.busy": "2023-07-21T06:41:17.616420Z",
     "iopub.status.idle": "2023-07-21T06:41:17.682237Z",
     "shell.execute_reply": "2023-07-21T06:41:17.681231Z"
    },
    "papermill": {
     "duration": 0.093609,
     "end_time": "2023-07-21T06:41:17.684436",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.590827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(1, 128, 128), dtype=float32, numpy=\n",
       "array([[[1., 0., 0., ..., 0., 0., 0.],\n",
       "        [1., 1., 0., ..., 0., 0., 0.],\n",
       "        [1., 1., 1., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [1., 1., 1., ..., 1., 0., 0.],\n",
       "        [1., 1., 1., ..., 1., 1., 0.],\n",
       "        [1., 1., 1., ..., 1., 1., 1.]]], dtype=float32)>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Causal Attention to make decoder not attent to future characters which it needs to predict\n",
    "def get_causal_attention_mask(B):\n",
    "    i = tf.range(N_TARGET_FRAMES)[:, tf.newaxis]\n",
    "    j = tf.range(N_TARGET_FRAMES)\n",
    "    mask = tf.cast(i >= j, dtype=tf.int32)\n",
    "    mask = tf.reshape(mask, (1, N_TARGET_FRAMES, N_TARGET_FRAMES))\n",
    "    mult = tf.concat(\n",
    "        [tf.expand_dims(B, -1), tf.constant([1, 1], dtype=tf.int32)],\n",
    "        axis=0,\n",
    "    )\n",
    "    mask = tf.tile(mask, mult)\n",
    "    mask = tf.cast(mask, tf.float32)\n",
    "    return mask\n",
    "\n",
    "get_causal_attention_mask(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f84f62f",
   "metadata": {
    "papermill": {
     "duration": 0.024666,
     "end_time": "2023-07-21T06:41:17.735864",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.711198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Non Pad/SOS/EOS Token Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "55efda52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.787707Z",
     "iopub.status.busy": "2023-07-21T06:41:17.786619Z",
     "iopub.status.idle": "2023-07-21T06:41:17.795100Z",
     "shell.execute_reply": "2023-07-21T06:41:17.794258Z"
    },
    "papermill": {
     "duration": 0.036455,
     "end_time": "2023-07-21T06:41:17.797114",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.760659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# TopK accuracy for multi dimensional output\n",
    "class TopKAccuracy(tf.keras.metrics.Metric):\n",
    "    def __init__(self, k, **kwargs):\n",
    "        super(TopKAccuracy, self).__init__(name=f'top{k}acc', **kwargs)\n",
    "        self.top_k_acc = tf.keras.metrics.SparseTopKCategoricalAccuracy(k=k)\n",
    "\n",
    "    def update_state(self, y_true, y_pred, sample_weight=None):\n",
    "        y_true = tf.reshape(y_true, [-1])\n",
    "        y_pred = tf.reshape(y_pred, [-1, N_UNIQUE_CHARACTERS])\n",
    "        character_idxs = tf.where(y_true < N_UNIQUE_CHARACTERS0)\n",
    "        y_true = tf.gather(y_true, character_idxs, axis=0)\n",
    "        y_pred = tf.gather(y_pred, character_idxs, axis=0)\n",
    "        self.top_k_acc.update_state(y_true, y_pred)\n",
    "\n",
    "    def result(self):\n",
    "        return self.top_k_acc.result()\n",
    "    \n",
    "    def reset_state(self):\n",
    "        self.top_k_acc.reset_state()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7276230",
   "metadata": {
    "papermill": {
     "duration": 0.024519,
     "end_time": "2023-07-21T06:41:17.846651",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.822132",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Loss Weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bf79d178",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:17.897738Z",
     "iopub.status.busy": "2023-07-21T06:41:17.897380Z",
     "iopub.status.idle": "2023-07-21T06:41:17.902107Z",
     "shell.execute_reply": "2023-07-21T06:41:17.901168Z"
    },
    "papermill": {
     "duration": 0.032938,
     "end_time": "2023-07-21T06:41:17.904193",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.871255",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create Initial Loss Weights All Set To 1\n",
    "loss_weights = np.ones(N_UNIQUE_CHARACTERS, dtype=np.float32)\n",
    "# Set Loss Weight Of Pad Token To 0\n",
    "loss_weights[PAD_TOKEN] = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd94ec41",
   "metadata": {
    "papermill": {
     "duration": 0.024451,
     "end_time": "2023-07-21T06:41:17.954076",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.929625",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Sparse Categorical Crossentropy With Label Smoothing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bf4ced47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:18.007314Z",
     "iopub.status.busy": "2023-07-21T06:41:18.005742Z",
     "iopub.status.idle": "2023-07-21T06:41:18.015166Z",
     "shell.execute_reply": "2023-07-21T06:41:18.014222Z"
    },
    "papermill": {
     "duration": 0.037763,
     "end_time": "2023-07-21T06:41:18.017252",
     "exception": false,
     "start_time": "2023-07-21T06:41:17.979489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# source:: https://stackoverflow.com/questions/60689185/label-smoothing-for-sparse-categorical-crossentropy\n",
    "def scce_with_ls(y_true, y_pred):\n",
    "    # Filter Pad Tokens\n",
    "    idxs = tf.where(y_true != PAD_TOKEN)\n",
    "    y_true = tf.gather_nd(y_true, idxs)\n",
    "    y_pred = tf.gather_nd(y_pred, idxs)\n",
    "    # One Hot Encode Sparsely Encoded Target Sign\n",
    "    y_true = tf.cast(y_true, tf.int32)\n",
    "    y_true = tf.one_hot(y_true, N_UNIQUE_CHARACTERS, axis=1)\n",
    "    # Categorical Crossentropy with native label smoothing support\n",
    "    loss = tf.keras.losses.categorical_crossentropy(y_true, y_pred, label_smoothing=0.25, from_logits=True)\n",
    "    loss = tf.math.reduce_mean(loss)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdd079ed",
   "metadata": {
    "papermill": {
     "duration": 0.024223,
     "end_time": "2023-07-21T06:41:18.066130",
     "exception": false,
     "start_time": "2023-07-21T06:41:18.041907",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "30bd26ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:18.117665Z",
     "iopub.status.busy": "2023-07-21T06:41:18.116822Z",
     "iopub.status.idle": "2023-07-21T06:41:18.126899Z",
     "shell.execute_reply": "2023-07-21T06:41:18.126010Z"
    },
    "papermill": {
     "duration": 0.038099,
     "end_time": "2023-07-21T06:41:18.128877",
     "exception": false,
     "start_time": "2023-07-21T06:41:18.090778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    # Inputs\n",
    "    frames_inp = tf.keras.layers.Input([N_TARGET_FRAMES, N_COLS], dtype=tf.float32, name='frames')\n",
    "    phrase_inp = tf.keras.layers.Input([MAX_PHRASE_LENGTH], dtype=tf.int32, name='phrase')\n",
    "    # Frames\n",
    "    x = frames_inp\n",
    "\n",
    "    # Masking\n",
    "    x = tf.keras.layers.Masking(mask_value=0.0, input_shape=(N_TARGET_FRAMES, N_COLS))(x)\n",
    "    \n",
    "    # Embedding\n",
    "    x = Embedding()(x)\n",
    "    \n",
    "    # Encoder Transformer Blocks\n",
    "    x = Encoder(NUM_BLOCKS_ENCODER)(x, frames_inp)\n",
    "    \n",
    "    # Decoder\n",
    "    x = Decoder(NUM_BLOCKS_DECODER)(x, phrase_inp)\n",
    "    \n",
    "    # Classifier\n",
    "    x = tf.keras.Sequential([\n",
    "        # Dropout\n",
    "        tf.keras.layers.Dropout(CLASSIFIER_DROPOUT_RATIO),\n",
    "        # Output Neurons\n",
    "        tf.keras.layers.Dense(N_UNIQUE_CHARACTERS, activation=tf.keras.activations.linear, kernel_initializer=INIT_HE_UNIFORM, use_bias=False),\n",
    "    ], name='classifier')(x)\n",
    "    \n",
    "    outputs = x\n",
    "    \n",
    "    # Create Tensorflow Model\n",
    "    model = tf.keras.models.Model(inputs=[frames_inp, phrase_inp], outputs=outputs)\n",
    "    \n",
    "    # Categorical Crossentropy Loss With Label Smoothing\n",
    "    loss = scce_with_ls\n",
    "    \n",
    "    # Adam Optimizer\n",
    "    optimizer = tfa.optimizers.RectifiedAdam(sma_threshold=4)\n",
    "    optimizer = tfa.optimizers.Lookahead(optimizer, sync_period=5)\n",
    "\n",
    "    # TopK Metrics\n",
    "    metrics = [\n",
    "        TopKAccuracy(1),\n",
    "        TopKAccuracy(5),\n",
    "    ]\n",
    "    \n",
    "    model.compile(\n",
    "        loss=loss,\n",
    "        optimizer=optimizer,\n",
    "        metrics=metrics,\n",
    "        loss_weights=loss_weights,\n",
    "    )\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9a44dfa8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:18.180608Z",
     "iopub.status.busy": "2023-07-21T06:41:18.179634Z",
     "iopub.status.idle": "2023-07-21T06:41:18.185799Z",
     "shell.execute_reply": "2023-07-21T06:41:18.184464Z"
    },
    "papermill": {
     "duration": 0.03403,
     "end_time": "2023-07-21T06:41:18.187794",
     "exception": false,
     "start_time": "2023-07-21T06:41:18.153764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "frames: (1024, 128, 164)\n",
      "phrase: (1024, 32)\n"
     ]
    }
   ],
   "source": [
    "# Input data\n",
    "for k, v in X_batch.items():\n",
    "    print(f'{k}: {v.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f0ace38d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:18.240894Z",
     "iopub.status.busy": "2023-07-21T06:41:18.239993Z",
     "iopub.status.idle": "2023-07-21T06:41:21.267950Z",
     "shell.execute_reply": "2023-07-21T06:41:21.266857Z"
    },
    "papermill": {
     "duration": 3.057445,
     "end_time": "2023-07-21T06:41:21.270681",
     "exception": false,
     "start_time": "2023-07-21T06:41:18.213236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tf.keras.backend.clear_session()\n",
    "\n",
    "model = get_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "07438171",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:21.333197Z",
     "iopub.status.busy": "2023-07-21T06:41:21.331390Z",
     "iopub.status.idle": "2023-07-21T06:41:21.475307Z",
     "shell.execute_reply": "2023-07-21T06:41:21.474369Z"
    },
    "papermill": {
     "duration": 0.234205,
     "end_time": "2023-07-21T06:41:21.535100",
     "exception": false,
     "start_time": "2023-07-21T06:41:21.300895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                   Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      " frames (InputLayer)            [(None, 128, 164)]   0           []                               \n",
      "                                                                                                  \n",
      " masking (Masking)              (None, 128, 164)     0           ['frames[0][0]']                 \n",
      "                                                                                                  \n",
      " embedding (Embedding)          (None, 128, 384)     259968      ['masking[0][0]']                \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| dominant_hand_embedding (Landm  multiple          210816      []                               |\n",
      "| arkEmbedding)                                                                                  |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| dominant_hand_embedding_dense   (None, 128, 384)  210432    []                               ||\n",
      "|| (Sequential)                                                                                 ||\n",
      "|||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|||\n",
      "||| dominant_hand_embedding_dense_  (None, 128, 384)  62976   []                               |||\n",
      "||| 1 (Dense)                                                                                  |||\n",
      "|||                                                                                            |||\n",
      "||| dominant_hand_embedding_dense_  (None, 128, 384)  147456  []                               |||\n",
      "||| 2 (Dense)                                                                                  |||\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " encoder (Encoder)              (None, 128, 256)     2757120     ['embedding[0][0]',              \n",
      "                                                                  'frames[0][0]']                 \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| layer_normalization (LayerNorm  multiple          768         []                               |\n",
      "| alization)                                                                                     |\n",
      "|                                                                                                |\n",
      "| layer_normalization_2 (LayerNo  multiple          768         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| layer_normalization_4 (LayerNo  multiple          768         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| multi_head_attention (MultiHea  multiple          294912      []                               |\n",
      "| dAttention)                                                                                    |\n",
      "|                                                                                                |\n",
      "| multi_head_attention_1 (MultiH  multiple          294912      []                               |\n",
      "| eadAttention)                                                                                  |\n",
      "|                                                                                                |\n",
      "| multi_head_attention_2 (MultiH  multiple          294912      []                               |\n",
      "| eadAttention)                                                                                  |\n",
      "|                                                                                                |\n",
      "| layer_normalization_1 (LayerNo  multiple          768         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| layer_normalization_3 (LayerNo  multiple          768         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| layer_normalization_5 (LayerNo  multiple          768         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| sequential (Sequential)      (None, 128, 384)     589824      []                               |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| dense_13 (Dense)           (None, 128, 768)     294912      []                               ||\n",
      "||                                                                                              ||\n",
      "|| dropout_1 (Dropout)        (None, 128, 768)     0           []                               ||\n",
      "||                                                                                              ||\n",
      "|| dense_14 (Dense)           (None, 128, 384)     294912      []                               ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_1 (Sequential)    (None, 128, 384)     589824      []                               |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| dense_29 (Dense)           (None, 128, 768)     294912      []                               ||\n",
      "||                                                                                              ||\n",
      "|| dropout_3 (Dropout)        (None, 128, 768)     0           []                               ||\n",
      "||                                                                                              ||\n",
      "|| dense_30 (Dense)           (None, 128, 384)     294912      []                               ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_2 (Sequential)    (None, 128, 384)     589824      []                               |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| dense_45 (Dense)           (None, 128, 768)     294912      []                               ||\n",
      "||                                                                                              ||\n",
      "|| dropout_5 (Dropout)        (None, 128, 768)     0           []                               ||\n",
      "||                                                                                              ||\n",
      "|| dense_46 (Dense)           (None, 128, 384)     294912      []                               ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| dense_47 (Dense)             multiple             98304       []                               |\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " phrase (InputLayer)            [(None, 32)]         0           []                               \n",
      "                                                                                                  \n",
      " decoder (Decoder)              (None, 32, 256)      968704      ['encoder[0][0]',                \n",
      "                                                                  'phrase[0][0]']                 \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| embedding (Embedding)        multiple             15872       []                               |\n",
      "|                                                                                                |\n",
      "| multi_head_attention (MultiHea  multiple          131072      []                               |\n",
      "| dAttention)                                                                                    |\n",
      "|                                                                                                |\n",
      "| layer_normalization (LayerNorm  multiple          512         []                               |\n",
      "| alization)                                                                                     |\n",
      "|                                                                                                |\n",
      "| layer_normalization_1 (LayerNo  multiple          512         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| layer_normalization_3 (LayerNo  multiple          512         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| multi_head_attention_1 (MultiH  multiple          131072      []                               |\n",
      "| eadAttention)                                                                                  |\n",
      "|                                                                                                |\n",
      "| multi_head_attention_2 (MultiH  multiple          131072      []                               |\n",
      "| eadAttention)                                                                                  |\n",
      "|                                                                                                |\n",
      "| layer_normalization_2 (LayerNo  multiple          512         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| layer_normalization_4 (LayerNo  multiple          512         []                               |\n",
      "| rmalization)                                                                                   |\n",
      "|                                                                                                |\n",
      "| sequential (Sequential)      (None, 128, 256)     262144      []                               |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| dense_26 (Dense)           (None, 128, 512)     131072      []                               ||\n",
      "||                                                                                              ||\n",
      "|| dropout_2 (Dropout)        (None, 128, 512)     0           []                               ||\n",
      "||                                                                                              ||\n",
      "|| dense_27 (Dense)           (None, 128, 256)     131072      []                               ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| sequential_1 (Sequential)    (None, 128, 256)     262144      []                               |\n",
      "||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||\n",
      "|| dense_41 (Dense)           (None, 128, 512)     131072      []                               ||\n",
      "||                                                                                              ||\n",
      "|| dropout_4 (Dropout)        (None, 128, 512)     0           []                               ||\n",
      "||                                                                                              ||\n",
      "|| dense_42 (Dense)           (None, 128, 256)     131072      []                               ||\n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      " classifier (Sequential)        (None, 32, 62)       15872       ['decoder[0][0]']                \n",
      "|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|\n",
      "| dropout (Dropout)            (None, 32, 256)      0           []                               |\n",
      "|                                                                                                |\n",
      "| dense (Dense)                (None, 32, 62)       15872       []                               |\n",
      "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n",
      "==================================================================================================\n",
      "Total params: 4,001,664\n",
      "Trainable params: 4,001,664\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Plot model summary\n",
    "model.summary(expand_nested=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "80b688da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:21.612371Z",
     "iopub.status.busy": "2023-07-21T06:41:21.611969Z",
     "iopub.status.idle": "2023-07-21T06:41:21.881839Z",
     "shell.execute_reply": "2023-07-21T06:41:21.881159Z"
    },
    "papermill": {
     "duration": 0.311755,
     "end_time": "2023-07-21T06:41:21.883851",
     "exception": false,
     "start_time": "2023-07-21T06:41:21.572096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot Model Architecture\n",
    "tf.keras.utils.plot_model(model, show_shapes=True, show_dtype=True, show_layer_names=True, expand_nested=True, show_layer_activations=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f51bc3b0",
   "metadata": {
    "papermill": {
     "duration": 0.036204,
     "end_time": "2023-07-21T06:41:21.956748",
     "exception": false,
     "start_time": "2023-07-21T06:41:21.920544",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Verify Training Flag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "be0b4639",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:22.034280Z",
     "iopub.status.busy": "2023-07-21T06:41:22.033899Z",
     "iopub.status.idle": "2023-07-21T06:41:27.516324Z",
     "shell.execute_reply": "2023-07-21T06:41:27.515332Z"
    },
    "papermill": {
     "duration": 5.525124,
     "end_time": "2023-07-21T06:41:27.518665",
     "exception": false,
     "start_time": "2023-07-21T06:41:21.993541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "31ecb913f2d745deb42a4dec1350479c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/10 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "376e53c58c63452d81f7d1e47237d67e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/10 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def verify_correct_training_flag():\n",
    "    # Verify static output for inference\n",
    "    pred = model(X_batch_small, training=False)\n",
    "    for _ in tqdm(range(10)):\n",
    "        assert tf.reduce_min(tf.cast(pred == model(X_batch_small, training=False), tf.int8)) == 1\n",
    "\n",
    "    # Verify at least 99% varying output due to dropout during training\n",
    "    for _ in tqdm(range(10)):\n",
    "        assert tf.reduce_mean(tf.cast(pred != model(X_batch_small, training=True), tf.float32)) > 0.99\n",
    "        \n",
    "verify_correct_training_flag()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1b56838",
   "metadata": {
    "papermill": {
     "duration": 0.036259,
     "end_time": "2023-07-21T06:41:27.592541",
     "exception": false,
     "start_time": "2023-07-21T06:41:27.556282",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Verify No NaN Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "47584f1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:27.669811Z",
     "iopub.status.busy": "2023-07-21T06:41:27.667674Z",
     "iopub.status.idle": "2023-07-21T06:41:36.735019Z",
     "shell.execute_reply": "2023-07-21T06:41:36.734087Z"
    },
    "papermill": {
     "duration": 9.107677,
     "end_time": "2023-07-21T06:41:36.737376",
     "exception": false,
     "start_time": "2023-07-21T06:41:27.629699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100/100 - 6s - 6s/epoch - 64ms/step\n",
      "# NaN Values In Predictions: 0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Verify No NaN predictions\n",
    "def verify_no_nan_predictions():\n",
    "    y_pred = model.predict(\n",
    "        val_dataset if USE_VAL else train_dataset,\n",
    "        steps=N_VAL_STEPS_PER_EPOCH if USE_VAL else 100,\n",
    "        verbose=VERBOSE,\n",
    "    )\n",
    "\n",
    "    print(f'# NaN Values In Predictions: {np.isnan(y_pred).sum()}')\n",
    "    \n",
    "    plt.figure(figsize=(15,8))\n",
    "    plt.title(f'Logit Predictions Initialized Model')\n",
    "    pd.Series(y_pred.flatten()).plot(kind='hist', bins=128)\n",
    "    plt.xlabel('Logits')\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "    \n",
    "verify_no_nan_predictions()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb9b9bcd",
   "metadata": {
    "papermill": {
     "duration": 0.037774,
     "end_time": "2023-07-21T06:41:36.818811",
     "exception": false,
     "start_time": "2023-07-21T06:41:36.781037",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Learning Rate Scheduler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7c02253a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:36.909887Z",
     "iopub.status.busy": "2023-07-21T06:41:36.909420Z",
     "iopub.status.idle": "2023-07-21T06:41:36.920365Z",
     "shell.execute_reply": "2023-07-21T06:41:36.918100Z"
    },
    "papermill": {
     "duration": 0.068494,
     "end_time": "2023-07-21T06:41:36.925526",
     "exception": false,
     "start_time": "2023-07-21T06:41:36.857032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def lrfn(current_step, num_warmup_steps, lr_max, num_cycles=0.50, num_training_steps=N_EPOCHS):\n",
    "    \n",
    "    if current_step < num_warmup_steps:\n",
    "        if WARMUP_METHOD == 'log':\n",
    "            return lr_max * 0.10 ** (num_warmup_steps - current_step)\n",
    "        else:\n",
    "            return lr_max * 2 ** -(num_warmup_steps - current_step)\n",
    "    else:\n",
    "        progress = float(current_step - num_warmup_steps) / float(max(1, num_training_steps - num_warmup_steps))\n",
    "\n",
    "        return max(0.0, 0.5 * (1.0 + math.cos(math.pi * float(num_cycles) * 2.0 * progress))) * lr_max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "195a2fa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:37.029476Z",
     "iopub.status.busy": "2023-07-21T06:41:37.028388Z",
     "iopub.status.idle": "2023-07-21T06:41:37.843123Z",
     "shell.execute_reply": "2023-07-21T06:41:37.842096Z"
    },
    "papermill": {
     "duration": 0.856077,
     "end_time": "2023-07-21T06:41:37.845255",
     "exception": false,
     "start_time": "2023-07-21T06:41:36.989178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_lr_schedule(lr_schedule, epochs):\n",
    "    fig = plt.figure(figsize=(20, 10))\n",
    "    plt.plot([None] + lr_schedule + [None])\n",
    "    # X Labels\n",
    "    x = np.arange(1, epochs + 1)\n",
    "    x_axis_labels = [i if epochs <= 40 or i % 5 == 0 or i == 1 else None for i in range(1, epochs + 1)]\n",
    "    plt.xlim([1, epochs])\n",
    "    plt.xticks(x, x_axis_labels) # set tick step to 1 and let x axis start at 1\n",
    "    \n",
    "    # Increase y-limit for better readability\n",
    "    plt.ylim([0, max(lr_schedule) * 1.1])\n",
    "    \n",
    "    # Title\n",
    "    schedule_info = f'start: {lr_schedule[0]:.1E}, max: {max(lr_schedule):.1E}, final: {lr_schedule[-1]:.1E}'\n",
    "    plt.title(f'Step Learning Rate Schedule, {schedule_info}', size=18, pad=12)\n",
    "    \n",
    "    # Plot Learning Rates\n",
    "    for x, val in enumerate(lr_schedule):\n",
    "        if epochs <= 40 or x % 5 == 0 or x is epochs - 1:\n",
    "            if x < len(lr_schedule) - 1:\n",
    "                if lr_schedule[x - 1] < val:\n",
    "                    ha = 'right'\n",
    "                else:\n",
    "                    ha = 'left'\n",
    "            elif x == 0:\n",
    "                ha = 'right'\n",
    "            else:\n",
    "                ha = 'left'\n",
    "            plt.plot(x + 1, val, 'o', color='black');\n",
    "            offset_y = (max(lr_schedule) - min(lr_schedule)) * 0.02\n",
    "            plt.annotate(f'{val:.1E}', xy=(x + 1, val + offset_y), size=12, ha=ha)\n",
    "    \n",
    "    plt.xlabel('Epoch', size=16, labelpad=5)\n",
    "    plt.ylabel('Learning Rate', size=16, labelpad=5)\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "\n",
    "# Learning rate for encoder\n",
    "LR_SCHEDULE = [lrfn(step, num_warmup_steps=N_WARMUP_EPOCHS, lr_max=LR_MAX, num_cycles=0.50) for step in range(N_EPOCHS)]\n",
    "# Plot Learning Rate Schedule\n",
    "plot_lr_schedule(LR_SCHEDULE, epochs=N_EPOCHS)\n",
    "# Learning Rate Callback\n",
    "lr_callback = tf.keras.callbacks.LearningRateScheduler(lambda step: LR_SCHEDULE[step], verbose=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a63e730",
   "metadata": {
    "papermill": {
     "duration": 0.038675,
     "end_time": "2023-07-21T06:41:37.923089",
     "exception": false,
     "start_time": "2023-07-21T06:41:37.884414",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Weight Decay Callback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "942f9be9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:38.003790Z",
     "iopub.status.busy": "2023-07-21T06:41:38.003067Z",
     "iopub.status.idle": "2023-07-21T06:41:38.009562Z",
     "shell.execute_reply": "2023-07-21T06:41:38.008913Z"
    },
    "papermill": {
     "duration": 0.049205,
     "end_time": "2023-07-21T06:41:38.011438",
     "exception": false,
     "start_time": "2023-07-21T06:41:37.962233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Custom callback to update weight decay with learning rate\n",
    "class WeightDecayCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, wd_ratio=WD_RATIO):\n",
    "        self.step_counter = 0\n",
    "        self.wd_ratio = wd_ratio\n",
    "    \n",
    "    def on_epoch_begin(self, epoch, logs=None):\n",
    "        model.optimizer.weight_decay = model.optimizer.learning_rate * self.wd_ratio\n",
    "        print(f'learning rate: {model.optimizer.learning_rate.numpy():.2e}, weight decay: {model.optimizer.weight_decay.numpy():.2e}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c07bcfda",
   "metadata": {
    "papermill": {
     "duration": 0.038932,
     "end_time": "2023-07-21T06:41:38.089771",
     "exception": false,
     "start_time": "2023-07-21T06:41:38.050839",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluate Initialized Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "76ac4ef0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:41:38.171671Z",
     "iopub.status.busy": "2023-07-21T06:41:38.171311Z",
     "iopub.status.idle": "2023-07-21T06:42:18.382335Z",
     "shell.execute_reply": "2023-07-21T06:42:18.381221Z"
    },
    "papermill": {
     "duration": 40.291704,
     "end_time": "2023-07-21T06:42:18.422118",
     "exception": false,
     "start_time": "2023-07-21T06:41:38.130414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "969/969 - 40s - loss: 5.0332 - top1acc: 0.0140 - top5acc: 0.0737 - 40s/epoch - 41ms/step\n"
     ]
    }
   ],
   "source": [
    "# Evaluate Initialized Model On Validation Data\n",
    "y_pred = model.evaluate(\n",
    "    val_dataset if USE_VAL else train_dataset,\n",
    "    steps=N_VAL_STEPS_PER_EPOCH if USE_VAL else TRAIN_STEPS_PER_EPOCH,\n",
    "    verbose=VERBOSE,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80b5f485",
   "metadata": {
    "papermill": {
     "duration": 0.039462,
     "end_time": "2023-07-21T06:42:18.501067",
     "exception": false,
     "start_time": "2023-07-21T06:42:18.461605",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e7b500ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:42:18.583041Z",
     "iopub.status.busy": "2023-07-21T06:42:18.582669Z",
     "iopub.status.idle": "2023-07-21T06:42:18.593420Z",
     "shell.execute_reply": "2023-07-21T06:42:18.592131Z"
    },
    "papermill": {
     "duration": 0.054113,
     "end_time": "2023-07-21T06:42:18.595648",
     "exception": false,
     "start_time": "2023-07-21T06:42:18.541535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline Accuracy: 0.4100\n"
     ]
    }
   ],
   "source": [
    "# baseline accuracy when only pad token is predicted\n",
    "if USE_VAL:\n",
    "    baseline_accuracy = np.mean(y_val == PAD_TOKEN)\n",
    "else:\n",
    "    baseline_accuracy = np.mean(y_train == PAD_TOKEN)\n",
    "print(f'Baseline Accuracy: {baseline_accuracy:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1edde63",
   "metadata": {
    "papermill": {
     "duration": 0.039225,
     "end_time": "2023-07-21T06:42:18.674819",
     "exception": false,
     "start_time": "2023-07-21T06:42:18.635594",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2934561d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:42:18.756207Z",
     "iopub.status.busy": "2023-07-21T06:42:18.755798Z",
     "iopub.status.idle": "2023-07-21T06:42:19.044283Z",
     "shell.execute_reply": "2023-07-21T06:42:19.042958Z"
    },
    "papermill": {
     "duration": 0.331242,
     "end_time": "2023-07-21T06:42:19.046375",
     "exception": false,
     "start_time": "2023-07-21T06:42:18.715133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25963"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "284b2d15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T06:42:19.129272Z",
     "iopub.status.busy": "2023-07-21T06:42:19.128860Z",
     "iopub.status.idle": "2023-07-21T10:08:21.298969Z",
     "shell.execute_reply": "2023-07-21T10:08:21.297854Z"
    },
    "papermill": {
     "duration": 12362.214962,
     "end_time": "2023-07-21T10:08:21.301732",
     "exception": false,
     "start_time": "2023-07-21T06:42:19.086770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                   Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      " frames (InputLayer)            [(None, 128, 164)]   0           []                               \n",
      "                                                                                                  \n",
      " masking (Masking)              (None, 128, 164)     0           ['frames[0][0]']                 \n",
      "                                                                                                  \n",
      " embedding (Embedding)          (None, 128, 384)     259968      ['masking[0][0]']                \n",
      "                                                                                                  \n",
      " encoder (Encoder)              (None, 128, 256)     2757120     ['embedding[0][0]',              \n",
      "                                                                  'frames[0][0]']                 \n",
      "                                                                                                  \n",
      " phrase (InputLayer)            [(None, 32)]         0           []                               \n",
      "                                                                                                  \n",
      " decoder (Decoder)              (None, 32, 256)      968704      ['encoder[0][0]',                \n",
      "                                                                  'phrase[0][0]']                 \n",
      "                                                                                                  \n",
      " classifier (Sequential)        (None, 32, 62)       15872       ['decoder[0][0]']                \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 4,001,664\n",
      "Trainable params: 4,001,664\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n",
      "learning rate: 9.77e-07, weight decay: 4.88e-08\n",
      "Epoch 1/100\n",
      "969/969 - 161s - loss: 4.5128 - top1acc: 0.0370 - top5acc: 0.1543 - lr: 9.7656e-07 - 161s/epoch - 166ms/step\n",
      "learning rate: 1.95e-06, weight decay: 9.77e-08\n",
      "Epoch 2/100\n",
      "969/969 - 123s - loss: 3.9462 - top1acc: 0.0994 - top5acc: 0.3152 - lr: 1.9531e-06 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.91e-06, weight decay: 1.95e-07\n",
      "Epoch 3/100\n",
      "969/969 - 123s - loss: 3.6382 - top1acc: 0.1462 - top5acc: 0.4323 - lr: 3.9063e-06 - 123s/epoch - 127ms/step\n",
      "learning rate: 7.81e-06, weight decay: 3.91e-07\n",
      "Epoch 4/100\n",
      "969/969 - 123s - loss: 3.4865 - top1acc: 0.1675 - top5acc: 0.4846 - lr: 7.8125e-06 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.56e-05, weight decay: 7.81e-07\n",
      "Epoch 5/100\n",
      "969/969 - 123s - loss: 3.3970 - top1acc: 0.1839 - top5acc: 0.5104 - lr: 1.5625e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.13e-05, weight decay: 1.56e-06\n",
      "Epoch 6/100\n",
      "969/969 - 123s - loss: 3.3271 - top1acc: 0.1993 - top5acc: 0.5333 - lr: 3.1250e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 6.25e-05, weight decay: 3.13e-06\n",
      "Epoch 7/100\n",
      "969/969 - 123s - loss: 3.2666 - top1acc: 0.2147 - top5acc: 0.5559 - lr: 6.2500e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.25e-04, weight decay: 6.25e-06\n",
      "Epoch 8/100\n",
      "969/969 - 123s - loss: 3.1956 - top1acc: 0.2371 - top5acc: 0.5911 - lr: 1.2500e-04 - 123s/epoch - 126ms/step\n",
      "learning rate: 2.50e-04, weight decay: 1.25e-05\n",
      "Epoch 9/100\n",
      "969/969 - 123s - loss: 3.1053 - top1acc: 0.2717 - top5acc: 0.6447 - lr: 2.5000e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.00e-04, weight decay: 2.50e-05\n",
      "Epoch 10/100\n",
      "969/969 - 123s - loss: 2.9743 - top1acc: 0.3320 - top5acc: 0.7100 - lr: 5.0000e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.00e-03, weight decay: 5.00e-05\n",
      "Epoch 11/100\n",
      "969/969 - 123s - loss: 2.8110 - top1acc: 0.4123 - top5acc: 0.7741 - lr: 0.0010 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.00e-03, weight decay: 5.00e-05\n",
      "Epoch 12/100\n",
      "969/969 - 123s - loss: 2.6419 - top1acc: 0.4968 - top5acc: 0.8216 - lr: 9.9970e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.99e-04, weight decay: 4.99e-05\n",
      "Epoch 13/100\n",
      "969/969 - 123s - loss: 2.5452 - top1acc: 0.5437 - top5acc: 0.8427 - lr: 9.9878e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.97e-04, weight decay: 4.99e-05\n",
      "Epoch 14/100\n",
      "969/969 - 123s - loss: 2.4841 - top1acc: 0.5727 - top5acc: 0.8539 - lr: 9.9726e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.95e-04, weight decay: 4.98e-05\n",
      "Epoch 15/100\n",
      "969/969 - 123s - loss: 2.4347 - top1acc: 0.5962 - top5acc: 0.8635 - lr: 9.9513e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.92e-04, weight decay: 4.96e-05\n",
      "Epoch 16/100\n",
      "969/969 - 123s - loss: 2.3954 - top1acc: 0.6140 - top5acc: 0.8701 - lr: 9.9240e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.89e-04, weight decay: 4.95e-05\n",
      "Epoch 17/100\n",
      "969/969 - 123s - loss: 2.3658 - top1acc: 0.6286 - top5acc: 0.8747 - lr: 9.8907e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.85e-04, weight decay: 4.93e-05\n",
      "Epoch 18/100\n",
      "969/969 - 123s - loss: 2.3385 - top1acc: 0.6406 - top5acc: 0.8796 - lr: 9.8515e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.81e-04, weight decay: 4.90e-05\n",
      "Epoch 19/100\n",
      "969/969 - 123s - loss: 2.3190 - top1acc: 0.6493 - top5acc: 0.8835 - lr: 9.8063e-04 - 123s/epoch - 126ms/step\n",
      "learning rate: 9.76e-04, weight decay: 4.88e-05\n",
      "Epoch 20/100\n",
      "969/969 - 122s - loss: 2.3008 - top1acc: 0.6576 - top5acc: 0.8864 - lr: 9.7553e-04 - 122s/epoch - 126ms/step\n",
      "learning rate: 9.70e-04, weight decay: 4.85e-05\n",
      "Epoch 21/100\n",
      "969/969 - 122s - loss: 2.2863 - top1acc: 0.6642 - top5acc: 0.8888 - lr: 9.6985e-04 - 122s/epoch - 126ms/step\n",
      "learning rate: 9.64e-04, weight decay: 4.82e-05\n",
      "Epoch 22/100\n",
      "969/969 - 123s - loss: 2.2712 - top1acc: 0.6710 - top5acc: 0.8909 - lr: 9.6359e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.57e-04, weight decay: 4.78e-05\n",
      "Epoch 23/100\n",
      "969/969 - 123s - loss: 2.2575 - top1acc: 0.6771 - top5acc: 0.8936 - lr: 9.5677e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.49e-04, weight decay: 4.75e-05\n",
      "Epoch 24/100\n",
      "969/969 - 123s - loss: 2.2454 - top1acc: 0.6829 - top5acc: 0.8954 - lr: 9.4940e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.41e-04, weight decay: 4.71e-05\n",
      "Epoch 25/100\n",
      "969/969 - 123s - loss: 2.2344 - top1acc: 0.6876 - top5acc: 0.8976 - lr: 9.4147e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.33e-04, weight decay: 4.67e-05\n",
      "Epoch 26/100\n",
      "969/969 - 123s - loss: 2.2265 - top1acc: 0.6913 - top5acc: 0.8991 - lr: 9.3301e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.24e-04, weight decay: 4.62e-05\n",
      "Epoch 27/100\n",
      "969/969 - 122s - loss: 2.2171 - top1acc: 0.6955 - top5acc: 0.9005 - lr: 9.2402e-04 - 122s/epoch - 126ms/step\n",
      "learning rate: 9.15e-04, weight decay: 4.57e-05\n",
      "Epoch 28/100\n",
      "969/969 - 123s - loss: 2.2077 - top1acc: 0.6999 - top5acc: 0.9021 - lr: 9.1452e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.05e-04, weight decay: 4.52e-05\n",
      "Epoch 29/100\n",
      "969/969 - 123s - loss: 2.1971 - top1acc: 0.7051 - top5acc: 0.9038 - lr: 9.0451e-04 - 123s/epoch - 126ms/step\n",
      "learning rate: 8.94e-04, weight decay: 4.47e-05\n",
      "Epoch 30/100\n",
      "969/969 - 123s - loss: 2.1893 - top1acc: 0.7081 - top5acc: 0.9051 - lr: 8.9401e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 8.83e-04, weight decay: 4.42e-05\n",
      "Epoch 31/100\n",
      "969/969 - 123s - loss: 2.1843 - top1acc: 0.7104 - top5acc: 0.9058 - lr: 8.8302e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 8.72e-04, weight decay: 4.36e-05\n",
      "Epoch 32/100\n",
      "969/969 - 123s - loss: 2.1760 - top1acc: 0.7142 - top5acc: 0.9069 - lr: 8.7157e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 8.60e-04, weight decay: 4.30e-05\n",
      "Epoch 33/100\n",
      "969/969 - 123s - loss: 2.1684 - top1acc: 0.7179 - top5acc: 0.9084 - lr: 8.5967e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 8.47e-04, weight decay: 4.24e-05\n",
      "Epoch 34/100\n",
      "969/969 - 123s - loss: 2.1646 - top1acc: 0.7196 - top5acc: 0.9089 - lr: 8.4733e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 8.35e-04, weight decay: 4.17e-05\n",
      "Epoch 35/100\n",
      "969/969 - 123s - loss: 2.1603 - top1acc: 0.7213 - top5acc: 0.9097 - lr: 8.3457e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 8.21e-04, weight decay: 4.11e-05\n",
      "Epoch 36/100\n",
      "969/969 - 123s - loss: 2.1517 - top1acc: 0.7254 - top5acc: 0.9113 - lr: 8.2139e-04 - 123s/epoch - 126ms/step\n",
      "learning rate: 8.08e-04, weight decay: 4.04e-05\n",
      "Epoch 37/100\n",
      "969/969 - 123s - loss: 2.1458 - top1acc: 0.7280 - top5acc: 0.9121 - lr: 8.0783e-04 - 123s/epoch - 126ms/step\n",
      "learning rate: 7.94e-04, weight decay: 3.97e-05\n",
      "Epoch 38/100\n",
      "969/969 - 123s - loss: 2.1425 - top1acc: 0.7296 - top5acc: 0.9126 - lr: 7.9389e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 7.80e-04, weight decay: 3.90e-05\n",
      "Epoch 39/100\n",
      "969/969 - 123s - loss: 2.1388 - top1acc: 0.7311 - top5acc: 0.9136 - lr: 7.7960e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 7.65e-04, weight decay: 3.82e-05\n",
      "Epoch 40/100\n",
      "969/969 - 123s - loss: 2.1319 - top1acc: 0.7344 - top5acc: 0.9145 - lr: 7.6496e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 7.50e-04, weight decay: 3.75e-05\n",
      "Epoch 41/100\n",
      "969/969 - 122s - loss: 2.1265 - top1acc: 0.7365 - top5acc: 0.9155 - lr: 7.5000e-04 - 122s/epoch - 126ms/step\n",
      "learning rate: 7.35e-04, weight decay: 3.67e-05\n",
      "Epoch 42/100\n",
      "969/969 - 123s - loss: 2.1204 - top1acc: 0.7396 - top5acc: 0.9162 - lr: 7.3474e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 7.19e-04, weight decay: 3.60e-05\n",
      "Epoch 43/100\n",
      "969/969 - 123s - loss: 2.1152 - top1acc: 0.7416 - top5acc: 0.9175 - lr: 7.1919e-04 - 123s/epoch - 126ms/step\n",
      "learning rate: 7.03e-04, weight decay: 3.52e-05\n",
      "Epoch 44/100\n",
      "969/969 - 122s - loss: 2.1103 - top1acc: 0.7446 - top5acc: 0.9183 - lr: 7.0337e-04 - 122s/epoch - 126ms/step\n",
      "learning rate: 6.87e-04, weight decay: 3.44e-05\n",
      "Epoch 45/100\n",
      "969/969 - 123s - loss: 2.1066 - top1acc: 0.7454 - top5acc: 0.9187 - lr: 6.8730e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 6.71e-04, weight decay: 3.36e-05\n",
      "Epoch 46/100\n",
      "969/969 - 123s - loss: 2.1016 - top1acc: 0.7480 - top5acc: 0.9196 - lr: 6.7101e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 6.55e-04, weight decay: 3.27e-05\n",
      "Epoch 47/100\n",
      "969/969 - 123s - loss: 2.0952 - top1acc: 0.7512 - top5acc: 0.9207 - lr: 6.5451e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 6.38e-04, weight decay: 3.19e-05\n",
      "Epoch 48/100\n",
      "969/969 - 124s - loss: 2.0935 - top1acc: 0.7515 - top5acc: 0.9208 - lr: 6.3782e-04 - 124s/epoch - 128ms/step\n",
      "learning rate: 6.21e-04, weight decay: 3.10e-05\n",
      "Epoch 49/100\n",
      "969/969 - 124s - loss: 2.0934 - top1acc: 0.7514 - top5acc: 0.9210 - lr: 6.2096e-04 - 124s/epoch - 128ms/step\n",
      "learning rate: 6.04e-04, weight decay: 3.02e-05\n",
      "Epoch 50/100\n",
      "969/969 - 123s - loss: 2.0820 - top1acc: 0.7569 - top5acc: 0.9232 - lr: 6.0396e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.87e-04, weight decay: 2.93e-05\n",
      "Epoch 51/100\n",
      "969/969 - 123s - loss: 2.0814 - top1acc: 0.7572 - top5acc: 0.9230 - lr: 5.8682e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.70e-04, weight decay: 2.85e-05\n",
      "Epoch 52/100\n",
      "969/969 - 123s - loss: 2.0766 - top1acc: 0.7593 - top5acc: 0.9236 - lr: 5.6959e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.52e-04, weight decay: 2.76e-05\n",
      "Epoch 53/100\n",
      "969/969 - 123s - loss: 2.0713 - top1acc: 0.7618 - top5acc: 0.9251 - lr: 5.5226e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.35e-04, weight decay: 2.67e-05\n",
      "Epoch 54/100\n",
      "969/969 - 123s - loss: 2.0712 - top1acc: 0.7617 - top5acc: 0.9247 - lr: 5.3488e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.17e-04, weight decay: 2.59e-05\n",
      "Epoch 55/100\n",
      "969/969 - 123s - loss: 2.0642 - top1acc: 0.7653 - top5acc: 0.9260 - lr: 5.1745e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.00e-04, weight decay: 2.50e-05\n",
      "Epoch 56/100\n",
      "969/969 - 123s - loss: 2.0594 - top1acc: 0.7668 - top5acc: 0.9268 - lr: 5.0000e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 4.83e-04, weight decay: 2.41e-05\n",
      "Epoch 57/100\n",
      "969/969 - 123s - loss: 2.0566 - top1acc: 0.7684 - top5acc: 0.9274 - lr: 4.8255e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 4.65e-04, weight decay: 2.33e-05\n",
      "Epoch 58/100\n",
      "969/969 - 123s - loss: 2.0515 - top1acc: 0.7705 - top5acc: 0.9278 - lr: 4.6512e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 4.48e-04, weight decay: 2.24e-05\n",
      "Epoch 59/100\n",
      "969/969 - 123s - loss: 2.0449 - top1acc: 0.7737 - top5acc: 0.9297 - lr: 4.4774e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 4.30e-04, weight decay: 2.15e-05\n",
      "Epoch 60/100\n",
      "969/969 - 123s - loss: 2.0429 - top1acc: 0.7750 - top5acc: 0.9296 - lr: 4.3041e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 4.13e-04, weight decay: 2.07e-05\n",
      "Epoch 61/100\n",
      "969/969 - 123s - loss: 2.0388 - top1acc: 0.7767 - top5acc: 0.9302 - lr: 4.1318e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.96e-04, weight decay: 1.98e-05\n",
      "Epoch 62/100\n",
      "969/969 - 123s - loss: 2.0373 - top1acc: 0.7770 - top5acc: 0.9306 - lr: 3.9604e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.79e-04, weight decay: 1.90e-05\n",
      "Epoch 63/100\n",
      "969/969 - 123s - loss: 2.0321 - top1acc: 0.7794 - top5acc: 0.9314 - lr: 3.7904e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.62e-04, weight decay: 1.81e-05\n",
      "Epoch 64/100\n",
      "969/969 - 123s - loss: 2.0253 - top1acc: 0.7825 - top5acc: 0.9329 - lr: 3.6218e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.45e-04, weight decay: 1.73e-05\n",
      "Epoch 65/100\n",
      "969/969 - 124s - loss: 2.0251 - top1acc: 0.7829 - top5acc: 0.9326 - lr: 3.4549e-04 - 124s/epoch - 128ms/step\n",
      "learning rate: 3.29e-04, weight decay: 1.64e-05\n",
      "Epoch 66/100\n",
      "969/969 - 123s - loss: 2.0214 - top1acc: 0.7842 - top5acc: 0.9332 - lr: 3.2899e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.13e-04, weight decay: 1.56e-05\n",
      "Epoch 67/100\n",
      "969/969 - 123s - loss: 2.0173 - top1acc: 0.7866 - top5acc: 0.9338 - lr: 3.1270e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.97e-04, weight decay: 1.48e-05\n",
      "Epoch 68/100\n",
      "969/969 - 123s - loss: 2.0148 - top1acc: 0.7877 - top5acc: 0.9341 - lr: 2.9663e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.81e-04, weight decay: 1.40e-05\n",
      "Epoch 69/100\n",
      "969/969 - 123s - loss: 2.0121 - top1acc: 0.7887 - top5acc: 0.9350 - lr: 2.8081e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.65e-04, weight decay: 1.33e-05\n",
      "Epoch 70/100\n",
      "969/969 - 123s - loss: 2.0103 - top1acc: 0.7897 - top5acc: 0.9347 - lr: 2.6526e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.50e-04, weight decay: 1.25e-05\n",
      "Epoch 71/100\n",
      "969/969 - 123s - loss: 2.0044 - top1acc: 0.7925 - top5acc: 0.9357 - lr: 2.5000e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.35e-04, weight decay: 1.18e-05\n",
      "Epoch 72/100\n",
      "969/969 - 123s - loss: 2.0023 - top1acc: 0.7931 - top5acc: 0.9363 - lr: 2.3504e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.20e-04, weight decay: 1.10e-05\n",
      "Epoch 73/100\n",
      "969/969 - 123s - loss: 1.9983 - top1acc: 0.7953 - top5acc: 0.9372 - lr: 2.2040e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.06e-04, weight decay: 1.03e-05\n",
      "Epoch 74/100\n",
      "969/969 - 123s - loss: 1.9943 - top1acc: 0.7973 - top5acc: 0.9372 - lr: 2.0611e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.92e-04, weight decay: 9.61e-06\n",
      "Epoch 75/100\n",
      "969/969 - 123s - loss: 1.9969 - top1acc: 0.7957 - top5acc: 0.9365 - lr: 1.9217e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.79e-04, weight decay: 8.93e-06\n",
      "Epoch 76/100\n",
      "969/969 - 123s - loss: 1.9920 - top1acc: 0.7982 - top5acc: 0.9375 - lr: 1.7861e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.65e-04, weight decay: 8.27e-06\n",
      "Epoch 77/100\n",
      "969/969 - 123s - loss: 1.9881 - top1acc: 0.7998 - top5acc: 0.9382 - lr: 1.6543e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.53e-04, weight decay: 7.63e-06\n",
      "Epoch 78/100\n",
      "969/969 - 123s - loss: 1.9870 - top1acc: 0.8005 - top5acc: 0.9382 - lr: 1.5267e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.40e-04, weight decay: 7.02e-06\n",
      "Epoch 79/100\n",
      "969/969 - 123s - loss: 1.9832 - top1acc: 0.8021 - top5acc: 0.9392 - lr: 1.4033e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.28e-04, weight decay: 6.42e-06\n",
      "Epoch 80/100\n",
      "969/969 - 123s - loss: 1.9798 - top1acc: 0.8036 - top5acc: 0.9400 - lr: 1.2843e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.17e-04, weight decay: 5.85e-06\n",
      "Epoch 81/100\n",
      "969/969 - 123s - loss: 1.9767 - top1acc: 0.8053 - top5acc: 0.9401 - lr: 1.1698e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.06e-04, weight decay: 5.30e-06\n",
      "Epoch 82/100\n",
      "969/969 - 123s - loss: 1.9764 - top1acc: 0.8053 - top5acc: 0.9400 - lr: 1.0599e-04 - 123s/epoch - 127ms/step\n",
      "learning rate: 9.55e-05, weight decay: 4.77e-06\n",
      "Epoch 83/100\n",
      "969/969 - 123s - loss: 1.9774 - top1acc: 0.8048 - top5acc: 0.9399 - lr: 9.5492e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 8.55e-05, weight decay: 4.27e-06\n",
      "Epoch 84/100\n",
      "969/969 - 124s - loss: 1.9738 - top1acc: 0.8067 - top5acc: 0.9404 - lr: 8.5481e-05 - 124s/epoch - 128ms/step\n",
      "learning rate: 7.60e-05, weight decay: 3.80e-06\n",
      "Epoch 85/100\n",
      "969/969 - 124s - loss: 1.9694 - top1acc: 0.8086 - top5acc: 0.9413 - lr: 7.5976e-05 - 124s/epoch - 128ms/step\n",
      "learning rate: 6.70e-05, weight decay: 3.35e-06\n",
      "Epoch 86/100\n",
      "969/969 - 124s - loss: 1.9686 - top1acc: 0.8088 - top5acc: 0.9412 - lr: 6.6987e-05 - 124s/epoch - 128ms/step\n",
      "learning rate: 5.85e-05, weight decay: 2.93e-06\n",
      "Epoch 87/100\n",
      "969/969 - 123s - loss: 1.9683 - top1acc: 0.8091 - top5acc: 0.9415 - lr: 5.8526e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 5.06e-05, weight decay: 2.53e-06\n",
      "Epoch 88/100\n",
      "969/969 - 123s - loss: 1.9648 - top1acc: 0.8107 - top5acc: 0.9416 - lr: 5.0603e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 4.32e-05, weight decay: 2.16e-06\n",
      "Epoch 89/100\n",
      "969/969 - 124s - loss: 1.9663 - top1acc: 0.8104 - top5acc: 0.9418 - lr: 4.3227e-05 - 124s/epoch - 127ms/step\n",
      "learning rate: 3.64e-05, weight decay: 1.82e-06\n",
      "Epoch 90/100\n",
      "969/969 - 124s - loss: 1.9606 - top1acc: 0.8126 - top5acc: 0.9424 - lr: 3.6408e-05 - 124s/epoch - 128ms/step\n",
      "learning rate: 3.02e-05, weight decay: 1.51e-06\n",
      "Epoch 91/100\n",
      "969/969 - 123s - loss: 1.9613 - top1acc: 0.8123 - top5acc: 0.9422 - lr: 3.0154e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.45e-05, weight decay: 1.22e-06\n",
      "Epoch 92/100\n",
      "969/969 - 123s - loss: 1.9641 - top1acc: 0.8111 - top5acc: 0.9418 - lr: 2.4472e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.94e-05, weight decay: 9.68e-07\n",
      "Epoch 93/100\n",
      "969/969 - 123s - loss: 1.9626 - top1acc: 0.8118 - top5acc: 0.9420 - lr: 1.9369e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.49e-05, weight decay: 7.43e-07\n",
      "Epoch 94/100\n",
      "969/969 - 123s - loss: 1.9624 - top1acc: 0.8120 - top5acc: 0.9420 - lr: 1.4852e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 1.09e-05, weight decay: 5.46e-07\n",
      "Epoch 95/100\n",
      "969/969 - 123s - loss: 1.9650 - top1acc: 0.8108 - top5acc: 0.9415 - lr: 1.0926e-05 - 123s/epoch - 127ms/step\n",
      "learning rate: 7.60e-06, weight decay: 3.80e-07\n",
      "Epoch 96/100\n",
      "969/969 - 123s - loss: 1.9589 - top1acc: 0.8136 - top5acc: 0.9428 - lr: 7.5961e-06 - 123s/epoch - 127ms/step\n",
      "learning rate: 4.87e-06, weight decay: 2.43e-07\n",
      "Epoch 97/100\n",
      "969/969 - 123s - loss: 1.9616 - top1acc: 0.8122 - top5acc: 0.9419 - lr: 4.8660e-06 - 123s/epoch - 127ms/step\n",
      "learning rate: 2.74e-06, weight decay: 1.37e-07\n",
      "Epoch 98/100\n",
      "969/969 - 122s - loss: 1.9620 - top1acc: 0.8119 - top5acc: 0.9421 - lr: 2.7391e-06 - 122s/epoch - 126ms/step\n",
      "learning rate: 1.22e-06, weight decay: 6.09e-08\n",
      "Epoch 99/100\n",
      "969/969 - 123s - loss: 1.9595 - top1acc: 0.8133 - top5acc: 0.9429 - lr: 1.2180e-06 - 123s/epoch - 127ms/step\n",
      "learning rate: 3.05e-07, weight decay: 1.52e-08\n",
      "Epoch 100/100\n",
      "969/969 - 123s - loss: 1.9591 - top1acc: 0.8137 - top5acc: 0.9426 - lr: 3.0459e-07 - 123s/epoch - 127ms/step\n"
     ]
    }
   ],
   "source": [
    "if TRAIN_MODEL:\n",
    "    # Clear all models in GPU\n",
    "    tf.keras.backend.clear_session()\n",
    "\n",
    "    # Get new fresh model\n",
    "    model = get_model()\n",
    "\n",
    "    # Sanity Check\n",
    "    model.summary()\n",
    "\n",
    "    # Actual Training\n",
    "    history = model.fit(\n",
    "            x=train_dataset,\n",
    "            steps_per_epoch=TRAIN_STEPS_PER_EPOCH,\n",
    "            epochs=N_EPOCHS,\n",
    "            # Only used for validation data since training data is a generator\n",
    "            validation_data=val_dataset if USE_VAL else None,\n",
    "            validation_steps=N_VAL_STEPS_PER_EPOCH if USE_VAL else None,\n",
    "            callbacks=[\n",
    "                lr_callback,\n",
    "                WeightDecayCallback(),\n",
    "            ],\n",
    "            verbose = VERBOSE,\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "16904840",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:08:21.419618Z",
     "iopub.status.busy": "2023-07-21T10:08:21.419265Z",
     "iopub.status.idle": "2023-07-21T10:08:21.425037Z",
     "shell.execute_reply": "2023-07-21T10:08:21.424139Z"
    },
    "papermill": {
     "duration": 0.065682,
     "end_time": "2023-07-21T10:08:21.427239",
     "exception": false,
     "start_time": "2023-07-21T10:08:21.361557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load Weights\n",
    "if LOAD_WEIGHTS:\n",
    "    model.load_weights('/kaggle/input/aslfr-training-python37/model.h5')\n",
    "    print(f'Successfully Loaded Pretrained Weights')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a8765ce4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:08:21.542337Z",
     "iopub.status.busy": "2023-07-21T10:08:21.541293Z",
     "iopub.status.idle": "2023-07-21T10:08:21.681235Z",
     "shell.execute_reply": "2023-07-21T10:08:21.680297Z"
    },
    "papermill": {
     "duration": 0.200455,
     "end_time": "2023-07-21T10:08:21.683637",
     "exception": false,
     "start_time": "2023-07-21T10:08:21.483182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save Model Weights\n",
    "model.save_weights('model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e06399e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:08:21.799277Z",
     "iopub.status.busy": "2023-07-21T10:08:21.798257Z",
     "iopub.status.idle": "2023-07-21T10:09:05.327009Z",
     "shell.execute_reply": "2023-07-21T10:09:05.325752Z"
    },
    "papermill": {
     "duration": 43.588886,
     "end_time": "2023-07-21T10:09:05.329622",
     "exception": false,
     "start_time": "2023-07-21T10:08:21.740736",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "969/969 - 40s - loss: 1.8637 - top1acc: 0.8564 - top5acc: 0.9559 - 40s/epoch - 41ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.863667368888855, 0.8563675284385681, 0.9559019207954407]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verify Model is Loaded Correctly\n",
    "model.evaluate(\n",
    "    val_dataset if USE_VAL else train_dataset,\n",
    "    steps=N_VAL_STEPS_PER_EPOCH if USE_VAL else TRAIN_STEPS_PER_EPOCH,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    verbose=VERBOSE,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "692515a3",
   "metadata": {
    "papermill": {
     "duration": 0.055501,
     "end_time": "2023-07-21T10:09:05.441319",
     "exception": false,
     "start_time": "2023-07-21T10:09:05.385818",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Levenshtein Distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c90a95a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:09:05.555088Z",
     "iopub.status.busy": "2023-07-21T10:09:05.554728Z",
     "iopub.status.idle": "2023-07-21T10:09:05.563219Z",
     "shell.execute_reply": "2023-07-21T10:09:05.562133Z"
    },
    "papermill": {
     "duration": 0.068808,
     "end_time": "2023-07-21T10:09:05.565801",
     "exception": false,
     "start_time": "2023-07-21T10:09:05.496993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Output Predictions to string\n",
    "def outputs2phrase(outputs):\n",
    "    if outputs.ndim == 2:\n",
    "        outputs = np.argmax(outputs, axis=1)\n",
    "    \n",
    "    return ''.join([ORD2CHAR.get(s, '') for s in outputs])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "977d8cd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:09:05.680955Z",
     "iopub.status.busy": "2023-07-21T10:09:05.680620Z",
     "iopub.status.idle": "2023-07-21T10:09:05.688985Z",
     "shell.execute_reply": "2023-07-21T10:09:05.687932Z"
    },
    "papermill": {
     "duration": 0.069776,
     "end_time": "2023-07-21T10:09:05.691488",
     "exception": false,
     "start_time": "2023-07-21T10:09:05.621712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "@tf.function()\n",
    "def predict_phrase(frames):\n",
    "    # Add Batch Dimension\n",
    "    frames = tf.expand_dims(frames, axis=0)\n",
    "    # Start Phrase\n",
    "    phrase = tf.fill([1,MAX_PHRASE_LENGTH], PAD_TOKEN)\n",
    "\n",
    "    for idx in tf.range(MAX_PHRASE_LENGTH):\n",
    "        # Cast phrase to int8\n",
    "        phrase = tf.cast(phrase, tf.int8)\n",
    "        # Predict Next Token\n",
    "        outputs = model({\n",
    "            'frames': frames,\n",
    "            'phrase': phrase,\n",
    "        })\n",
    "\n",
    "        # Add predicted token to input phrase\n",
    "        phrase = tf.cast(phrase, tf.int32)\n",
    "        phrase = tf.where(\n",
    "            tf.range(MAX_PHRASE_LENGTH) < idx + 1,\n",
    "            tf.argmax(outputs, axis=2, output_type=tf.int32),\n",
    "            phrase,\n",
    "        )\n",
    "\n",
    "    # Squeeze outputs\n",
    "    outputs = tf.squeeze(phrase, axis=0)\n",
    "    outputs = tf.one_hot(outputs, N_UNIQUE_CHARACTERS)\n",
    "\n",
    "    # Return a dictionary with the output tensor\n",
    "    return outputs\n",
    "\n",
    "    # Return a dictionary with the output tensor\n",
    "    return outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4810aae",
   "metadata": {
    "papermill": {
     "duration": 0.056792,
     "end_time": "2023-07-21T10:09:05.805362",
     "exception": false,
     "start_time": "2023-07-21T10:09:05.748570",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Levenstein Distance Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6b2bc576",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:09:05.919927Z",
     "iopub.status.busy": "2023-07-21T10:09:05.919566Z",
     "iopub.status.idle": "2023-07-21T10:09:05.926898Z",
     "shell.execute_reply": "2023-07-21T10:09:05.925885Z"
    },
    "papermill": {
     "duration": 0.067633,
     "end_time": "2023-07-21T10:09:05.929025",
     "exception": false,
     "start_time": "2023-07-21T10:09:05.861392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compute Levenstein Distances\n",
    "def get_ld_train():\n",
    "    N = 100 if IS_INTERACTIVE else 1000\n",
    "    LD_TRAIN = []\n",
    "    for idx, (frames, phrase_true) in enumerate(zip(tqdm(X_train, total=N), y_train)):\n",
    "        # Predict Phrase and Convert to String\n",
    "        phrase_pred = predict_phrase(frames).numpy()\n",
    "        phrase_pred = outputs2phrase(phrase_pred)\n",
    "        # True Phrase Ordinal to String\n",
    "        phrase_true = outputs2phrase(phrase_true)\n",
    "        # Add Levenstein Distance\n",
    "        LD_TRAIN.append({\n",
    "            'phrase_true': phrase_true,\n",
    "            'phrase_pred': phrase_pred,\n",
    "            'levenshtein_distance': levenshtein(phrase_pred, phrase_true),\n",
    "        })\n",
    "        # Take subset in interactive mode\n",
    "        if idx == N:\n",
    "            break\n",
    "            \n",
    "    # Convert to DataFrame\n",
    "    LD_TRAIN_DF = pd.DataFrame(LD_TRAIN)\n",
    "    \n",
    "    return LD_TRAIN_DF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9d9cd202",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:09:06.044947Z",
     "iopub.status.busy": "2023-07-21T10:09:06.044572Z",
     "iopub.status.idle": "2023-07-21T10:11:15.759124Z",
     "shell.execute_reply": "2023-07-21T10:11:15.758051Z"
    },
    "papermill": {
     "duration": 129.775593,
     "end_time": "2023-07-21T10:11:15.761456",
     "exception": false,
     "start_time": "2023-07-21T10:09:05.985863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "230889a65f904c59b3c85357d3c9513a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>phrase_true</th>\n",
       "      <th>phrase_pred</th>\n",
       "      <th>levenshtein_distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3 creekhouse</td>\n",
       "      <td>3 creek housese.se</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>scales/kuhaylah</td>\n",
       "      <td>scales/kuhayla</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>hentaihubs.com</td>\n",
       "      <td>hentaihubs.com.com</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1383 william lanier</td>\n",
       "      <td>138 william lanier</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>988 franklin lane</td>\n",
       "      <td>988 franklin lane</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6920 northeast 661st road</td>\n",
       "      <td>6920 northeast 661st road</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>www.freem.ne.jp</td>\n",
       "      <td>www.freem.me.jp.jp</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>https://jsi.is/hukuoka</td>\n",
       "      <td>https://jsi.is/htkuoka</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>239613 stolze street</td>\n",
       "      <td>239613 stolze street street</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>242-197-6202</td>\n",
       "      <td>+221-776-602</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>271097 bayshore boulevard</td>\n",
       "      <td>271097 bayhore boulevard</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>federico pearson</td>\n",
       "      <td>federico pearonn</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>/carpina/hope_&amp;_faith/litle</td>\n",
       "      <td>/carpina/hope_fith/litlee</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>dine-in/code/</td>\n",
       "      <td>dine-cin/code/code/ode//</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>+264-97-568-217-145</td>\n",
       "      <td>+264-97-58-2745</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>+51-2721-208-63</td>\n",
       "      <td>+51-7121-208-6363</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>wildberries_ru</td>\n",
       "      <td>wilders-ailders-anders-ander</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>leona owens</td>\n",
       "      <td>leona owensals</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>+220-557-859-04</td>\n",
       "      <td>+220-557-859-04</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>kati castro</td>\n",
       "      <td>kati castrooo</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>5566 hellertown road</td>\n",
       "      <td>5605 woods court road</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>6867 granville drive</td>\n",
       "      <td>6867 granville drive</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1600 fire water</td>\n",
       "      <td>1600 water rd</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>+45-39-007-1887</td>\n",
       "      <td>+45-39-007-18877</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>65634/tennessee%20river</td>\n",
       "      <td>65634/tennesseeo/200river</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>596-033-4046</td>\n",
       "      <td>550-040-48484</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>18 cutter ridge road</td>\n",
       "      <td>18 cutter ridge road</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>tampa fl</td>\n",
       "      <td>tampa fl</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>492288 west 28th terrace south</td>\n",
       "      <td>492288 west 28th terrace south</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>166 water power</td>\n",
       "      <td>www.partingway.com.tw/angel</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       phrase_true                     phrase_pred  \\\n",
       "0                     3 creekhouse              3 creek housese.se   \n",
       "1                  scales/kuhaylah                  scales/kuhayla   \n",
       "2                   hentaihubs.com              hentaihubs.com.com   \n",
       "3              1383 william lanier              138 william lanier   \n",
       "4                988 franklin lane               988 franklin lane   \n",
       "5        6920 northeast 661st road       6920 northeast 661st road   \n",
       "6                  www.freem.ne.jp              www.freem.me.jp.jp   \n",
       "7           https://jsi.is/hukuoka          https://jsi.is/htkuoka   \n",
       "8             239613 stolze street     239613 stolze street street   \n",
       "9                     242-197-6202                    +221-776-602   \n",
       "10       271097 bayshore boulevard        271097 bayhore boulevard   \n",
       "11                federico pearson                federico pearonn   \n",
       "12     /carpina/hope_&_faith/litle       /carpina/hope_fith/litlee   \n",
       "13                   dine-in/code/        dine-cin/code/code/ode//   \n",
       "14             +264-97-568-217-145                 +264-97-58-2745   \n",
       "15                 +51-2721-208-63               +51-7121-208-6363   \n",
       "16                  wildberries_ru    wilders-ailders-anders-ander   \n",
       "17                     leona owens                  leona owensals   \n",
       "18                 +220-557-859-04                 +220-557-859-04   \n",
       "19                     kati castro                   kati castrooo   \n",
       "20            5566 hellertown road           5605 woods court road   \n",
       "21            6867 granville drive            6867 granville drive   \n",
       "22                 1600 fire water                   1600 water rd   \n",
       "23                 +45-39-007-1887                +45-39-007-18877   \n",
       "24         65634/tennessee%20river       65634/tennesseeo/200river   \n",
       "25                    596-033-4046                   550-040-48484   \n",
       "26            18 cutter ridge road            18 cutter ridge road   \n",
       "27                        tampa fl                        tampa fl   \n",
       "28  492288 west 28th terrace south  492288 west 28th terrace south   \n",
       "29                 166 water power     www.partingway.com.tw/angel   \n",
       "\n",
       "    levenshtein_distance  \n",
       "0                      6  \n",
       "1                      1  \n",
       "2                      4  \n",
       "3                      1  \n",
       "4                      0  \n",
       "5                      0  \n",
       "6                      4  \n",
       "7                      1  \n",
       "8                      7  \n",
       "9                      7  \n",
       "10                     1  \n",
       "11                     2  \n",
       "12                     4  \n",
       "13                    11  \n",
       "14                     4  \n",
       "15                     4  \n",
       "16                    19  \n",
       "17                     3  \n",
       "18                     0  \n",
       "19                     2  \n",
       "20                    13  \n",
       "21                     0  \n",
       "22                     8  \n",
       "23                     1  \n",
       "24                     3  \n",
       "25                     7  \n",
       "26                     0  \n",
       "27                     0  \n",
       "28                     0  \n",
       "29                    22  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "LD_TRAIN_DF = get_ld_train()\n",
    "\n",
    "# Display Errors\n",
    "display(LD_TRAIN_DF.head(30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fde7a370",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:15.881278Z",
     "iopub.status.busy": "2023-07-21T10:11:15.879602Z",
     "iopub.status.idle": "2023-07-21T10:11:16.547072Z",
     "shell.execute_reply": "2023-07-21T10:11:16.546106Z"
    },
    "papermill": {
     "duration": 0.727272,
     "end_time": "2023-07-21T10:11:16.549321",
     "exception": false,
     "start_time": "2023-07-21T10:11:15.822049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Value Counts\n",
    "LD_TRAIN_VC = dict([(i, 0) for i in range(LD_TRAIN_DF['levenshtein_distance'].max()+1)])\n",
    "for ld in LD_TRAIN_DF['levenshtein_distance']:\n",
    "    LD_TRAIN_VC[ld] += 1\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "pd.Series(LD_TRAIN_VC).plot(kind='bar', width=1)\n",
    "plt.title(f'Train Levenstein Distance Distribution | Mean: {LD_TRAIN_DF.levenshtein_distance.mean():.4f}')\n",
    "plt.xlabel('Levenstein Distance')\n",
    "plt.ylabel('Sample Count')\n",
    "plt.xlim(-0.50, LD_TRAIN_DF.levenshtein_distance.max()+0.50)\n",
    "plt.grid(axis='y')\n",
    "plt.savefig('temp.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6681d6fc",
   "metadata": {
    "papermill": {
     "duration": 0.05665,
     "end_time": "2023-07-21T10:11:16.664437",
     "exception": false,
     "start_time": "2023-07-21T10:11:16.607787",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Levenstein Distance Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8ec7cc57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:16.791087Z",
     "iopub.status.busy": "2023-07-21T10:11:16.790723Z",
     "iopub.status.idle": "2023-07-21T10:11:16.797933Z",
     "shell.execute_reply": "2023-07-21T10:11:16.796961Z"
    },
    "papermill": {
     "duration": 0.068782,
     "end_time": "2023-07-21T10:11:16.800059",
     "exception": false,
     "start_time": "2023-07-21T10:11:16.731277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compute Levenstein Distances\n",
    "def get_ld_val():\n",
    "    N = 100 if IS_INTERACTIVE else 1000\n",
    "    LD_VAL = []\n",
    "    for idx, (frames, phrase_true) in enumerate(zip(tqdm(X_val, total=N), y_val)):\n",
    "        # Predict Phrase and Convert to String\n",
    "        phrase_pred = predict_phrase(frames).numpy()\n",
    "        phrase_pred = outputs2phrase(phrase_pred)\n",
    "        # True Phrase Ordinal to String\n",
    "        phrase_true = outputs2phrase(phrase_true)\n",
    "        # Add Levenstein Distance\n",
    "        LD_VAL.append({\n",
    "            'phrase_true': phrase_true,\n",
    "            'phrase_pred': phrase_pred,\n",
    "            'levenshtein_distance': levenshtein(phrase_pred, phrase_true),\n",
    "        })\n",
    "        # Take subset in interactive mode\n",
    "        if idx == N:\n",
    "            break\n",
    "            \n",
    "    # Convert to DataFrame\n",
    "    LD_VAL_DF = pd.DataFrame(LD_VAL)\n",
    "    \n",
    "    return LD_VAL_DF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "4dcd68ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:16.950975Z",
     "iopub.status.busy": "2023-07-21T10:11:16.950621Z",
     "iopub.status.idle": "2023-07-21T10:11:16.965955Z",
     "shell.execute_reply": "2023-07-21T10:11:16.963915Z"
    },
    "papermill": {
     "duration": 0.110958,
     "end_time": "2023-07-21T10:11:16.968677",
     "exception": false,
     "start_time": "2023-07-21T10:11:16.857719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if USE_VAL:\n",
    "    LD_VAL_DF = get_ld_val()\n",
    "\n",
    "    # Display Errors\n",
    "    display(LD_VAL_DF.head(30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d747ef75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:17.104144Z",
     "iopub.status.busy": "2023-07-21T10:11:17.102988Z",
     "iopub.status.idle": "2023-07-21T10:11:17.111360Z",
     "shell.execute_reply": "2023-07-21T10:11:17.110305Z"
    },
    "papermill": {
     "duration": 0.077143,
     "end_time": "2023-07-21T10:11:17.113617",
     "exception": false,
     "start_time": "2023-07-21T10:11:17.036474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Value Counts\n",
    "if USE_VAL:\n",
    "    LD_VAL_VC = dict([(i, 0) for i in range(LD_VAL_DF['levenshtein_distance'].max()+1)])\n",
    "    for ld in LD_VAL_DF['levenshtein_distance']:\n",
    "        LD_VAL_VC[ld] += 1\n",
    "\n",
    "    plt.figure(figsize=(15,8))\n",
    "    pd.Series(LD_VAL_VC).plot(kind='bar', width=1)\n",
    "    plt.title(f'Validation Levenstein Distance Distribution | Mean: {LD_VAL_DF.levenshtein_distance.mean():.4f}')\n",
    "    plt.xlabel('Levenstein Distance')\n",
    "    plt.ylabel('Sample Count')\n",
    "    plt.xlim(0-0.50, LD_VAL_DF.levenshtein_distance.max()+0.50)\n",
    "    plt.grid(axis='y')\n",
    "    plt.savefig('temp.png')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ced62bcc",
   "metadata": {
    "papermill": {
     "duration": 0.068878,
     "end_time": "2023-07-21T10:11:17.245696",
     "exception": false,
     "start_time": "2023-07-21T10:11:17.176818",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training History"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b1506ba2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:17.370727Z",
     "iopub.status.busy": "2023-07-21T10:11:17.370353Z",
     "iopub.status.idle": "2023-07-21T10:11:17.385885Z",
     "shell.execute_reply": "2023-07-21T10:11:17.384770Z"
    },
    "papermill": {
     "duration": 0.081201,
     "end_time": "2023-07-21T10:11:17.388142",
     "exception": false,
     "start_time": "2023-07-21T10:11:17.306941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_history_metric(metric, f_best=np.argmax, ylim=None, yscale=None, yticks=None):\n",
    "    # Only plot when training\n",
    "    if not TRAIN_MODEL:\n",
    "        return\n",
    "    \n",
    "    plt.figure(figsize=(20, 10))\n",
    "    \n",
    "    values = history.history[metric]\n",
    "    N_EPOCHS = len(values)\n",
    "    val = 'val' in ''.join(history.history.keys())\n",
    "    # Epoch Ticks\n",
    "    if N_EPOCHS <= 20:\n",
    "        x = np.arange(1, N_EPOCHS + 1)\n",
    "    else:\n",
    "        x = [1, 5] + [10 + 5 * idx for idx in range((N_EPOCHS - 10) // 5 + 1)]\n",
    "\n",
    "    x_ticks = np.arange(1, N_EPOCHS+1)\n",
    "\n",
    "    # Validation\n",
    "    if val:\n",
    "        val_values = history.history[f'val_{metric}']\n",
    "        val_argmin = f_best(val_values)\n",
    "        plt.plot(x_ticks, val_values, label=f'val')\n",
    "\n",
    "    # summarize history for accuracy\n",
    "    plt.plot(x_ticks, values, label=f'train')\n",
    "    argmin = f_best(values)\n",
    "    plt.scatter(argmin + 1, values[argmin], color='red', s=75, marker='o', label=f'train_best')\n",
    "    if val:\n",
    "        plt.scatter(val_argmin + 1, val_values[val_argmin], color='purple', s=75, marker='o', label=f'val_best')\n",
    "\n",
    "    plt.title(f'Model {metric}', fontsize=24, pad=10)\n",
    "    plt.ylabel(metric, fontsize=20, labelpad=10)\n",
    "\n",
    "    if ylim:\n",
    "        plt.ylim(ylim)\n",
    "\n",
    "    if yscale is not None:\n",
    "        plt.yscale(yscale)\n",
    "        \n",
    "    if yticks is not None:\n",
    "        plt.yticks(yticks, fontsize=16)\n",
    "\n",
    "    plt.xlabel('epoch', fontsize=20, labelpad=10)        \n",
    "    plt.tick_params(axis='x', labelsize=8)\n",
    "    plt.xticks(x, fontsize=16) # set tick step to 1 and let x axis start at 1\n",
    "    plt.yticks(fontsize=16)\n",
    "    \n",
    "    plt.legend(prop={'size': 10})\n",
    "    plt.grid()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "02056bcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:17.514187Z",
     "iopub.status.busy": "2023-07-21T10:11:17.512991Z",
     "iopub.status.idle": "2023-07-21T10:11:18.033463Z",
     "shell.execute_reply": "2023-07-21T10:11:18.032530Z"
    },
    "papermill": {
     "duration": 0.585287,
     "end_time": "2023-07-21T10:11:18.036072",
     "exception": false,
     "start_time": "2023-07-21T10:11:17.450785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_history_metric('loss', f_best=np.argmin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "c50cedc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:18.156842Z",
     "iopub.status.busy": "2023-07-21T10:11:18.155920Z",
     "iopub.status.idle": "2023-07-21T10:11:18.642171Z",
     "shell.execute_reply": "2023-07-21T10:11:18.641098Z"
    },
    "papermill": {
     "duration": 0.54806,
     "end_time": "2023-07-21T10:11:18.644599",
     "exception": false,
     "start_time": "2023-07-21T10:11:18.096539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_history_metric('top1acc', ylim=[0,1], yticks=np.arange(0.0, 1.1, 0.1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "f8cea539",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:18.765723Z",
     "iopub.status.busy": "2023-07-21T10:11:18.765366Z",
     "iopub.status.idle": "2023-07-21T10:11:19.249009Z",
     "shell.execute_reply": "2023-07-21T10:11:19.248079Z"
    },
    "papermill": {
     "duration": 0.547078,
     "end_time": "2023-07-21T10:11:19.251188",
     "exception": false,
     "start_time": "2023-07-21T10:11:18.704110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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K95X25h1UTEwqm520p49e0L/HNPS0jRjxowaxyssLFR+fn6N91T8HdmxY0d9ym2ScQAAAICGIuABAAAAosz48ePVuXPnSs9ddNFFSklJqfdYOTk5slqtkgKzFb755ptaX5Obmxv6At9qtSonJ6fS9UGDBoWOK25YH05xcbG+/fbbGu8ZPnx46PiTTz6pdcxIMAyjXvc3Re9PtmzZslrHNE1TK1asCJ0PGTKk1tfUZu3ataHjirN5giruqZSdnS2brebtY7/44otaA7ARI0aEjj/77LO6llrjOMuWLVNZWdkpjwUAAAA0BAEPAAAAEGWsVqumTZtW6blTWZ5NCiwTdtZZZ4XOgzOCalJx35Szzz67ygyNivuvzJ8/X8eOHatxvLffflsul6vGeyZNmhQKAbZu3aoPPvig1jqbW2xsbOjY4/HUen9T9P5kc+fOrXX/ogULFmjfvn2SJLvdrlGjRtVaR002bdqkr776KnQ+ZsyYKvdYLCf+VbUuy8g9++yztd7zox/9KHT81ltv6ejRo7W+pjojRoxQWlqapMCycK+99topjQMAAAA0FAEPAAAAEIVmzpyplStXhn4mTZp0ymP9/Oc/Dx0//fTTWr9+fdh7165dq+eeey50fuutt1a5Z9KkSerSpYukwJf3d999d9jx8vLy9Ic//KHWGrt06aKrr7660vsGQ4na+P1+HTlypE73NkRqamoouDh8+HCdQp7G7v3JioqK9L//+79hr5eVlenOO+8MnV900UWVlo4LquteNE6nUzfccIN8Pp8kKT09vVLwEtSzZ8/QjKdvv/1W27ZtCzvm22+/XadA75JLLlGPHj1C9d5www2h/anqIyYmRr/85S9D53fffbc2bdpU73EAAACAhiLgAQAAAKJQamqqzjrrrNBPcKmvU3HVVVeFlvpyu92aNGmSFi1aVOW+hQsX6vzzzw8FF0OGDNHUqVOr3Ge1WvXAAw+Ezl944QXdddddcrvdle7bvn27Jk2apH379snhcNRa5x//+MfQcl/79u3TsGHD9K9//Ut+v7/a+/ft26cnn3xS/fv319tvv13r+A0VExOjfv36SZK8Xq/ee++9Wl/T2L0/mcPh0HPPPac777yzyiypAwcO6MILLwyFSg6HQ/fff3+144wYMULTp0+vtPTayZYvX66RI0dWWhZu1qxZSkpKqnJvZmZmaNk9v9+vyy67rEqI4vf79fTTT+uaa66R1WqtNEOqOjabTU8//XQoOPrggw80adIkbdy4sdr7d+7cqfvuu6/aGTozZsxQ7969JUnHjx/XOeeco7feeqvaZeJKS0v15ptv6sYbb6yxPgAAAKC+DLMuO3UCAAAAaDHGjh2rJUuWSAosTVWXmRrhXHnllaFw4w9/+INmzZpV7X0bNmzQmDFjKs10ycnJCe2ns27dOuXm5oautW/fXkuXLg0FGtX56U9/qnfffTd0npmZqXPPPVcpKSnasWOHlixZIq/Xq2HDhqlv37564403JAWWIbv++uurHXPlypWaPHlypeW32rdvr+HDh6tDhw7y+/3Ky8vTt99+q+3bt4e+kH/qqad02223VRmv4r45jfGvTvfee68efvhhSYHlziZMmKA+ffrIbreH7vnzn/9c6TWN3fuKvz+zZ8/WzJkz5Xa7lZ6ernHjxiktLU27d+/W4sWLK4U+Tz75pG6//fZqx8zKytKuXbtC75+Tk6NOnTopLi5OBQUFWrNmjbZs2VLpNTfffLOef/75sL1auHChJk6cGArogsvD9erVS8XFxVq6dKkOHDggSXr44Yf1t7/9LVTDjh07lJWVVe24f/rTnyrNWjIMQzk5OTr99NOVmJioY8eOaf369aFA6YknntBvfvObKuOsX79eEyZM0OHDh0PPdejQQSNHjlS7du3kdDq1bds2rVmzRmVlZcrJydG6devCfl4AAACg3kwAAAAArcqYMWNMSaYk89lnn23QWFdccUVorD/84Q813rtp0yZz8ODBofvD/QwZMsTcunVrre/tcrnMadOm1TjW2Wefbe7du9e87rrrQs+9/PLLNY67c+dO87zzzqu1zuBPhw4dzI8//rjasSre1xiOHz9uDhgwoMZ6qtOYva/4+7No0SLzP//5j5mSkhJ2TIfDYc6ZM6fGMXv06FHnficnJ5v/93//V6d+Pfvss6bNZgs7lsViMe+77z7T7/dXqmHHjh01jvvWW2+ZHTp0qFO9f/vb38KOs3PnTnP06NF1GmfUqFF1+swAAABAXdnqlAIBAAAAaPP69eunVatW6V//+pf+/e9/6+uvvw7NXgjOkrn00kv105/+tNLMl3AcDodef/11XXvttXr++ee1bNkyHT16VBkZGcrOzta0adN03XXX1Wl5top69OihBQsWaNmyZXrnnXf0+eefa8+ePcrPz5fNZlNGRob69u2rs846SxMnTtTYsWNlszXPvxolJyfr66+/1rPPPqt58+Zpw4YNKigoqHU/nsbufUU//vGPtX79ej333HP64IMPtGfPHrlcLnXt2lWTJk3Sbbfdpuzs7BrHWLp0qb766it99dVXWrNmjQ4dOqS8vDwVFhYqISFB7dq105AhQ3Teeedp2rRpSkxMrFNtt956q0aNGqUnnnhCixYt0v79+xUXF6cuXbpo3LhxuvHGGzV48OB6fV5JuuKKKzRlyhS99tpr+uijj5Sbm6sjR47I5/MpLS1N2dnZOuecc3TppZfWOH6PHj20ZMkSLVy4UO+8805oVlHwc/fo0UNDhw7VBRdcoB//+Mf1rhMAAACoCUu0AQAAAEAbUnGJtkWLFmns2LGRLQgAAADAKbFEugAAAAAAAAAAAADUDwEPAAAAAAAAAABAK0PAAwAAAAAAAAAA0MoQ8AAAAAAAAAAAALQyBDwAAAAAAAAAAACtTNQGPDt27NDzzz+vW265RTk5ObLZbDIMQw899FCDxl22bJkuuugitWvXTnFxcRowYIAefPBBOZ3ORqocAAAAAAAAAACgZrZIF9BUnnzyST355JONOubrr7+u6667Tj6fT126dFG3bt307bff6r777tO8efO0ePFixcfHN+p7AgAAAEBjWrx4caRLAAAAANAIonYGT2ZmpqZMmaIHHnhAH330kX760582aLydO3fqpptuks/n02OPPaY9e/ZozZo12rJli7Kzs7Vy5UrNmDGjkaoHAAAAAAAAAAAIL2pn8Nx7772Vzt96660GjTd79my5XC5NnDhRd911V+j5Hj166KWXXtKoUaP0t7/9Tb///e/VoUOHBr0XAAAAAAAAAABATaJ2Bk9jMk1T7733niTppptuqnJ95MiR6t+/vzwej/7zn/80d3kAAAAAAAAAAKCNIeCpg927d+vAgQOSpFGjRlV7T/D5FStWNFtdAAAAAAAAAACgbYraJdoa05YtWyRJMTEx6ty5c7X39OrVq9K94bhcLrlcrtC53+/XsWPHlJGRIcMwGqliAAAAAAAAAADQGpmmqaKiInXu3FkWS/h5OgQ8dZCfny9JSk1NDRvCpKWlVbo3nEceeUT3339/4xYIAAAAAAAAAACiyp49e9S1a9ew1wl46sDpdEqSHA5H2HtiYmIk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wCNJL730ko4ePaoFCxZo3759mjVrVrX3maYpSZowYYJeffXVxnhroE0xTVP/++/1+mbfcaXF2/X8tWcpIaZR/hgDAAAAAAAAAFqRBi/RJkmxsbH65JNP9MQTT6hz584yTbPan27duumvf/2rPv74Y8XGxjbGWwNtygtLd+j9dftltRh65qqh6pYeH+mSAAAAAAAAAAAR0Gj/6b9hGPr1r3+t22+/XevWrdPatWt19OhRSVJmZqaGDBminJwcGQZLSQGn4vPNR/TIRxskSfdNGaD/396dx2lZ1/vjf90Dw4zsIKKgIqKmuYRgSkmledRSyeWYfdX2sPpWZifXo/YtOnjK9GSWLb9SK89J2zO1TBMPLSqaC2JmC+CCySKyurAMzPX7A2eSmHsYZoDhvu/n8/GYhzPXdn+u97zBm3nN53O9fo/tu3lEAAAAAAB0l82+tlOpVMqYMWMyZsyYzX1pqFlPLXoxH//+9DQXyTteu0ve8/rduntIAAAAAAB0o82yRBuw5by4ak0+9N8PZtmKphy468BMPnF/M+EAAAAAAGqcgAe2Yc3NRc750Yz8dcHz2aFfQ7757oPS0LNHdw8LAAAAAIButlmXaCuKIg8//HBmzJiR5557LitWrEhRFO2e8+lPf3pzDgGqytemzsptf5qfXj3q8v+966Ds2L+xu4cEAAAAAMA2YLMFPNddd10++9nP5qmnntqk8wQ80LYpjy3IF+/4W5LkP07YLwftNqibRwQAAAAAwLZiswQ8F198cS699NKNztZJklKp1KHjoJbNevaF/NsPH06SvPt1u+XUQ0Z074AAAAAAANimdPkZPPfdd18+//nPJ0mOOuqoPPzww3nooYeSrAtz1q5dm+eeey633XZbTjjhhBRFkTe84Q2ZN29empubu/ryUHWWrWjKh/77gbywak0O2X1wPv22fbt7SAAAAAAAbGO6HPB84xvfSJLstttu+eUvf5nXvOY1qa+vb91fKpUyePDgHH300bnxxhvzta99LXfddVfe+ta3ZvXq1V19eagqa5uL/NsPpufx517M8AGN+fo7x6a+R5f/mAIAAAAAUGW6/JPje+65J6VSKWeddVZ69tz4im8f+chHcvLJJ+eRRx7J17/+9a6+PFSVK+74a6b+dWEaetblm+9+bYb0bejuIQEAAAAAsA3qcsAzb968JMl+++33j4vW/eOyTU1NG5zz7ne/O0VR5Ic//GFXXx6qxi8fmZevTZ2dJPnCya/JAbsM6OYRAQAAAACwrepywNMS4AwdOrR1W9++fVs/X7hw4Qbn7LrrrkmSWbNmdfXloSr8ed7ynPvjGUmSD75x95w4ZuduHhEAAAAAANuyLgc8O+ywQ5Jk+fLlrdt23HHH9OjRI0ny5z//eYNzWmb9PP/88119eah4S15anQ/9zwNZ0bQ2b9xrSC546z7dPSQAAAAAALZxXQ54WpZm+8tf/tK6rVevXq3b21qG7frrr0+SDB8+vKsvDxVtbZH82w8fydOLV2TE4N656rQx6dmjy38sAQAAAACocl3+SfIb3/jGFEWRqVOnrrf9//yf/5OiKPLtb387n/70p/OnP/0p999/f84888x8//vfT6lUyjHHHNPVl4eKdvNTdbnn8cXp3atHvvWegzKwd6/uHhIAAAAAABWgywHPiSeemCT5xS9+sd4ybZ/4xCcycuTINDc35z//8z/zmte8Jq973evyjW98I0kyaNCgXHjhhV19eahYNz08N7+Zt+6P4BdPGZ19durfzSMCAAAAAKBSbJYl2qZOnZobb7wxa9asad3eu3fvTJ06NePHj09RFOt97L///rnzzjuzyy67dPXloSLNXvhC/t/NjyVJPnrYqBxzwLBuHhEAAAAAAJVkszzs47DDDsu//Mu/ZPDgwett32233fL73/8+f/7zn/OTn/wkP/jBD/Lggw/mkUceyejRozfHS2/UrbfemiOPPDKDBw9Onz59Mnbs2Fx11VVpbm7epOtMmjQppVKp3Y9XPocIylm9pjmf+MH0rGhqzl79m/OJI/bo7iEBAAAAAFBhem6NF9l7772z9957b42XWs+ll17augzcqFGj0rdv38yYMSNnnXVWpkyZkhtvvDF1dZuWce26664ZMWJEm/t69+7d5TFT/b7467/m0WeWZ+B29XnXnitSV1fq7iEBAAAAAFBhtkrA0x2mTZuWiy66KHV1dfne976X0047LUkyY8aMvOUtb8nNN9+cK664Iueee+4mXfcDH/hAJk2atAVGTC24a+Zz+ebvHk+SfO7E/dL05APdPCIAAAAAACrRZlmibVt0ySWXpCiKnHHGGa3hTpKMHj06V1xxRZJ1M3yampq6a4jUmMUvrs7ZP3o4SXL6uBE5at+h3TsgAAAAAAAq1habwTNt2rT89re/zTPPPJMkGT58eA477LAceuihW+olWy1fvjxTpkxJkkycOHGD/aeccko+8pGPZNGiRZk6dWqOPvroLT4maltRFDn/J4/k2edXZY8d+uT/Hbdvkk17DhQAAAAAALTYpIBnzpw5SZKdd945PXr0aPOYGTNm5IwzzshDDz3U5v4DDzwwV199dcaOHbuJQ+246dOnZ/Xq1WlsbGzzderr63PwwQfnzjvvzH333bdJAc/UqVPzpz/9KYsWLcrgwYNzyCGH5D3veU922mmnzXkLVJnv3TcnU/68IL161OUrp43Jdr16pKlJwAMAAAAAQOdsUsAzcuTI1NXV5ZFHHsm+++67wf5p06blLW95S1588cUURdHmNaZPn57DDjssd9xxR173utd1btQbMXPmzCTJiBEj0rNn27c4atSo3Hnnna3HdtTvfve79b7+6U9/mkmTJuXrX/963ve+9230/FWrVmXVqlWtXy9fvjxJ0tTUZLm4V2ipRTXUZOaCF3LJLx5Lkpx79F551Q691/t+V8M9bm5q0z71KU9tylOb8tSmPLUpT23apz7lqU15alOe2pSnNuWpTfvUpzy1KU9tylOb8tSmPLUpr6M1KRXlkpg21NXVpVQq5Y9//OMGAc+KFSvyqle9qnVJtiOPPDIf/vCHs++++6Yoijz22GP55je/mTvvvDPJurDoL3/5S3r16tXRl++wyy+/POeff37GjRuXe++9t81jLrjgglx22WWZMGFCbrnllo1e85vf/GbmzJmTk046KaNGjcp2222X6dOn55JLLsmvfvWrlEql3HTTTXnb297W7nUmTZqUz372sxtsv+GGG9K7d++O3SAVo6k5ueKPPTL3pVL2GdCcD7+6OXWl7h4VAAAAAADbqpdeeimnn356li1blv79+5c9brM9g+fb3/52nnnmmZRKpVx00UWZPHnyevv33XffvP3tb8+nPvWpfO5zn8tTTz2VG264oUOzXjbVypUrk6Td8KihoSHJumCqIz784Q9vsO3QQw/NL3/5y5x88sm58cYb88lPfjITJkxIqVT+J/gXXnhhzj777Navly9fnl133TVHH310u9+oWtPU1JQ77rgjRx11VOrr67t7OJ12ya1/ydyX5mRwn/p8+8OHZod+Da37quUetwS1aZ/6lKc25alNeWpTntqUpzbtU5/y1KY8tSlPbcpTm/LUpn3qU57alKc25alNeWpTntqU17Ly18ZstoCnZRbMIYccskG480qXXHJJpkyZkvvvvz+33HLLFgl4GhsbkySrV68ue0zLMmnbbbddl16rVCrl0ksvzY033pjZs2fnkUceyejRo8se39DQ0BouvVJ9fb0mbkMl12XqX5/NddPWPbfqi6ccmOGD+7Z5XCXf45amNu1Tn/LUpjy1KU9tylOb8tSmfepTntqUpzblqU15alOe2rRPfcpTm/LUpjy1KU9tylObDXW0HnWb6wUfeeSRlEqlTJw4caPHTpw4MUVR5KGHHtpcL7+eQYMGJUmWLFlS9piWfS3HdsWrXvWqDB48OEkya9asLl+Pyrfw+VU578czkiTvO3Rk3rzP0G4eEQAAAAAA1WSzBTyLFy9OkhxwwAEbPfY1r3lNkuS5557bXC+/nr322itJMmfOnKxZs6bNYx5//PH1ju2qlkSt3OtRO5qbi5z74xl57oXV2XvHfvn3Y/bp7iEBAAAAAFBlNlvA07LUWcvyaO1pWaJsS4UhY8aMSX19fVauXNnmLKGmpqbcf//9SZJx48Z1+fWee+65PPvss0mSXXbZpcvXo7J9954n89u/LUxDz7p85bQxaazv0d1DAgAAAACgynQq4CmVShtsa5m5s2DBgo2ev3Tp0iTJ9ttv35mX36j+/fvnyCOPTJJce+21G+z/8Y9/nOXLl2f77bfP4Ycf3uXXu+KKK1IURQYMGJCDDz64y9ejcj02d3ku/dVfkiQXH/fq7L1Tv24eEQAAAAAA1ahTAc/RRx+dUaNGrfcxY8a654105Lk6jz32WJJk6NAt91ySiy++OKVSKddcc02+//3vt26fMWNGzj777CTJ+eefn169erXuu/LKKzNy5Miceuqp613rT3/6Uz760Y/mT3/603rbV65cmc997nP5whe+kCS54IIL1rsetWXF6rX5xA+mZ/Xa5vzLPkPz7tft1t1DAgAAAACgSm1ywFMURZ555pk8+eST6308//zzKYoit9xyy0avcccdd6RUKrU+i2dLGD9+fCZPnpzm5uacfvrp2WOPPTJ69OiMHTs2CxYsyHHHHZdzzjlnvXOWLl2ap556KvPnz19ve1NTU77xjW9k//33z9ChQ/Pa1742r33ta7P99tvn4osvTnNzcyZOnJh///d/32L3w7bvP299LDOffSE7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r05jY2PGjh27wf76+vocfPDBSZL77rtvk659ySWXZNasWbn88sszcODAzTFcusmsZ19MYgYPAAAAAACVp2d3D2BLmDlzZpJkxIgR6dmz7VscNWpU7rzzztZjO+LPf/5zLr/88rzxjW/Me97znk6NbdWqVVm1alXr18uXL0+SNDU1dWq5uGrVUostVZNlK5ry3Avrvg8jBjV0S+239D1WMrVpn/qUpzblqU15alOe2pSnNu1Tn/LUpjy1KU9tylOb8tSmfepTntqUpzblqU15alOe2pTX0ZqUiqIotvBYtrrLL788559/fsaNG5d77723zWMuuOCCXHbZZZkwYUJuueWWjV6zKIocdthhmTZtWqZPn579998/STJp0qR89rOfzcSJE3PNNdds9Dotx/+zG264Ib17997o+WweTzyfXPlozwzoVeQ/Dlrb3cMBAAAAAIAkyUsvvZTTTz89y5YtS//+/cseV5UzeFauXJkk6dWrV9ljGhoakiQrVqzo0DWvvfba/P73v8+5557bGu50xoUXXpizzz679evly5dn1113zdFHH93uN6rWNDU15Y477shRRx2V+vr6zX79nzz0TPLon7Lfrtvn2GNfu9mv3xFb+h4rmdq0T33KU5vy1KY8tSlPbcpTm/apT3lqU57alKc25alNeWrTPvUpT23KU5vy1KY8tSlPbcprWflrY6oy4GlsbEySrF69uuwxLcukbbfddhu93sKFC3PBBRdkl112yWc+85kuja2hoaE1XHql+vp6TdyGLVWXJxevC/b2Gtqv2+vue1+e2rRPfcpTm/LUpjy1KU9tylOb9qlPeWpTntqUpzblqU15atM+9SlPbcpTm/LUpjy1KU9tNtTRelRlwDNo0KAkyZIlS8oe07Kv5dj2nH/++Vm8eHG++c1vpm/fvptnkHSr2c++kCTZY6jvJwAAAAAAlacqA5699torSTJnzpysWbMmPXtueJuPP/74ese2Z/r06UmSM888M2eeeeZ6+154YV1QcMMNN+QXv/hFkmT+/PmdHzxbxeyFLyZJ9txBwAMAAAAAQOWpyoBnzJgxqa+vz8qVK/PQQw/lkEMOWW9/U1NT7r///iTJuHHjOnzdBQsWlN23YsWKDj/Ph+61as3aPLVoXcBjBg8AAAAAAJWorrsHsCX0798/Rx55ZJLk2muv3WD/j3/84yxfvjzb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nXRSfvWrX2X58uV56qmncv/99+fJJ5/Mo48+mte85jV54okn8pGPfGQL3hEbM2+p5dkAAAAAAKgNVRvwXHLJJSmKImeccUZOO+201u2jR49uDXYuvfTSNDU1deh6J598ct761rdmu+3WDw/23XffXHPNNUmS22+/PStXrtxMd8CmeublGTw7W54NAAAAAIAqV5UBz/LlyzNlypQkycSJEzfYf8opp6R///5ZtGhRpk6d2uXX22effZIka9euzapVq7p8PTpn3rJ1AY8ZPAAAAAAAVLuqDHimT5+e1atXp7GxMWPHjt1gf319fQ4++OAkyX333dfl15s2bVqSZNSoURkwYECXr0fntC7RZgYPAAAAAABVriqfRD9z5swkyYgRI9KzZ9u3OGrUqNx5552tx26qoiiyYMGC3HnnnTnvvPPSs2fPDj3TZ9WqVevN8lm+fHmSpKmpqcPLxdWCllpsSk3+vuSlJMmOfXtVRC07c4+1Qm3apz7lqU15alOe2pSnNuWpTfvUpzy1KU9tylOb8tSmPLVpn/qUpzblqU15alOe2pSnNuV1tCaloiiKLTyWre7yyy/P+eefn3HjxuXee+9t85gLLrggl112WSZMmJBbbrmlw9f++c9/npNOOmm9bYcddlj+8z//M+PHj9/o+ZMmTcpnP/vZDbbfcMMN6d27d4fHwYb+46EeWbSqlLP2W5M9+nf3aAAAAAAAYNO99NJLOf3007Ns2bL071/+h91VOYNn5cp1S3X16tWr7DENDQ1JkhUrVmzStbfffvuMHz8+a9euzdNPP525c+fmD3/4Q/77v/87Y8eOzXbbtf/8lwsvvDBnn31269fLly/PrrvumqOPPrrdb1StaWpqyh133JGjjjoq9fX1Gz2+ubnIuX+YkqTIv771zdl54Lb/HJ5NvcdaojbtU5/y1KY8tSlPbcpTm/LUpn3qU57alKc25alNeWpTntq0T33KU5vy1KY8tSlPbcpTm/JaVv7amKoMeBob1z2DZfXq1WWPaVkmbWOBzD974xvfmLvuuqv16z//+c/52Mc+lm9961uZM2dOfvWrX7V7fkNDQ2u49Er19fWauA0drcuzz69M09oipVKy8+C+qe9ROY+X8r0vT23apz7lqU15alOe2pSnNuWpTfvUpzy1KU9tylOb8tSmPLVpn/qUpzblqU15alOe2pSnNhvq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zz679evly5dn1113zdFHH93uN6rWNDU15Y477shRRx2V+vr6fP3xe5K8kKPfcHDetNeQ7h7eZvHP98g/qE371Kc8tSlPbcpTm/LUpjy1aZ/6lKc25alNeWpTntqUpzbtU5/y1KY8tSlPbcpTm/LUpryWlb82pioDnsbGxiTJ6tWryx7TskxaZ5+bs3jx4hxzzDF57rnncvjhh+eKK67o0HkNDQ2t4dIr1dfXa+I2tNSl5Rk8I7bvW3V18r0vT23apz7lqU15alOe2pSnNuWpTfvUpzy1KU9tylOb8tSmPLVpn/qUpzblqU15alOe2pSnNhvqaD3qtvA4usWgQYOSJEuWLCl7TMu+lmM3xQsvvJBjjz02jz32WA466KDcfPPNbYY2bB4vrFqT5SvXJEmGDexcIAcAAAAAANWkKgOevfbaK8m6JdTWrFnT5jGPP/74esd21KpVq3LCCSfkvvvuy7777pvbbrst/fr169qAade8peuW0evf2DN9G6py0hkAAAAAAGySqgx4xowZk/r6+qxcuTIPPfTQBvubmppy//33J0nGjRvX4euuWbMm73jHO/K///u/GTVqVO64444MGVIdz4PZlj3zcsAz3OwdAAAAAABIUqUBT//+/XPkkUcmSa699toN9v/4xz/O8uXLs/322+fwww/v0DWLosj73ve+3HzzzRk+fHimTJmS4cOHb85hU0bL83eGDWjs5pEAAAAAAMC2oSoDniS5+OKLUyqVcs011+T73/9+6/YZM2bk7LPPTpKcf/756dWrV+u+K6+8MiNHjsypp566wfU+8YlP5Prrr8+QIUMyZcqU7L777lv+JkjyjyXazOABAAAAAIB1qvaBJuPHj8/kyZPzqU99Kqeffno+9alPpW/fvnn00UfT3Nyc4447Luecc8565yxdujRPPfVURo4cud72adOm5aqrrkqSbLfddvngBz9Y9nXvuuuuzX4vte6Zpetm8Ah4AAAAAABgnaoNeJJ1s3hGjx6dL33pS3nwwQczf/78HHDAAXn/+9+fM888Mz169OjQdVatWtX6+dNPP52nn356Sw2ZNsxb1jKDxxJtAAAAAACQVHnAkyQTJkzIhAkTOnTspEmTMmnSpA22H3744SmKYjOPjI6a+/ISbcMGmMEDAAAAAABJFT+Dh+pQFEXmLXt5iTYBDwAAAAAAJBHwsI1b/FJT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jq2uI8uldWQZt3++3tKlS8uuebcp1wMAAAAAAOiKqgx49tprryTJnDlzsmbNmjaPefzxx9c7tiPXW7VqVebOndvl6wEAAAAAAHRFVQY8Y8aMSX19fVauXJmHHnpog/1NTU25//77kyTjxo3b6PVGjBiRnXbaKUly9913t3lMy/aOXI+Na2hoyGc+85kNlrOrJrVwj52lNu1Tn/LUpjy1KU9tylOb8tSmfepTntqUpzblqU15alOe2rRPfcpTm/LUpjy1KU9tylObrisV5dYcq3DHHntsfvWrX+VDH/pQvvnNb66374Ybbsg73/nObL/99pk7d2569eq10et99KMfzTe+8Y0cffTRuf3229fbd88992T8+PGpr6/PnDlzWsMgAAAAAACALaEqZ/AkycUXX5xSqZRrrrkm3//+91u3z5gxI2effXaS5Pzzz18v3LnyyiszcuTInHrqqRtc77zzzkuvXr3y61//Opdffnnrs3ieeuqpfOADH0iSnHHGGcIdAAAAAABgi6vagGf8+PGZPHlympubc/rpp2ePPfbI6NGjM3bs2CxYsCDHHXdczjnnnPXOWbp0aZ566qnMnz9/g+vtvvvuufrqq1NXV5fzzz8/u+66a8aOHZu99torf/3rX3PQQQfl8ssv31q3BwAAAAAA1LCqDXiSdbN4brnllhxxxBFZtGhRZs2alQMOOCBXXnllbrrppvTo0WOTrvee97wnv//97zNhwoSsWLEijz32WEaNGpVJkyblrrvuSp8+fbbQnQAAAAAAAPxD1T6DBwAAAAAAoFpV9QweAAAAAACAaiTgYZvxxBNP5Oqrr84HP/jBjB49Oj179kypVMoll1zS3UPbbN73vvelVCq1+7Fy5cruHuYW05Xv8bRp03LCCSdkhx12yHbbbZd99903kydPrpp6daY2kyZN2mg//eUvf9mKd7H5FUWRu+66K+edd15e97rXZeDAgenVq1eGDx+ek08+OVOnTm33/Grum87Wphb6psXPf/7zfPjDH85BBx2UYcOGpVevXhk4cGAOPfTQfPnLX87q1avLnlvNvZN0rja11Duv9KlPfar1/tr7O7nae6acjdWnVvqmK+/xqr13OlObWumbFmvXrs3VV1+dww47LEOGDEljY2N22223nHjiibnpppvaPKfa++aVNqU+tdA7Tz755EbvseXjt7/97QbnV3PvdLY2tdA3LZ599tmce+652W+//dK7d+80NjZmjz32yIc+9KHMmjWr7HnV3DctNrU2tdQ38+fPzyc/+cnstddeaWxszJAhQ/LWt741t99+e7vn1ULfbGptqq1vuuPnfH/+85/zzne+M8OGDWv9c3ruuedm6dKlm+muKk/P7h4AtPjyl7+cL3/5y909jK1ir732ytChQ9vcV1dXvblrZ7/H119/fd773vdm7dq12XnnnbPrrrvm0Ucfzac//enccsst+c1vfpPevXtvgRFvPV3p/1133TUjRoxoc1+l1+V///d/c+SRRyZZ92djzz33TJ8+fTJz5sz87Gc/y89+9rN86lOfyuTJkzc4t9r7piu1Saq7b1r813/9V+6+++40NDRk+PDhGT16dObNm5dp06Zl2rRp+Z//+Z9MmTIlAwcOXO+8au+dpPO1SWqjd1r8+c9/zuWXX77R42qhZ9rS0foktdM3m/oer5Z6pzPvf2uhb5YsWZJjjz029957b0qlUl71qldl5MiRmTt3bm666ab07NkzJ5xwwnrn1FLfdKY+SXX3TmNjY8aPH192/7x58/L444+nsbExBx544Hr7qr13ulKbpLr7Jkn++te/5k1velOeffbZ1NfXZ9SoUamvr8+sWbNy9dVX5/rrr8+tt96aww47bL3zqr1vks7XJqn+vvnjH/+Yo446KgsWLEhDQ0P233//LFu2LLfffntuv/32fP7zn8+///u/b3BeLfRNZ2uTVE/fbO2f802dOjXHHXdcVqxYkR122CH77bdf/vKXv+SLX/xibrzxxtxzzz3ZcccdN8etVZYCthGTJ08uJkyYUPzHf/xH8atf/ao4+eSTiyTF5MmTu3tom8173/veIknxne98p7uH0i068z1+4oknioaGhiJJcdlllxXNzc1FURTFk08+Wey9995FkuJjH/vY1rqFLaYztfnMZz5TJCk+85nPbL2BbmV33HFHseeeexZf//rXi8WLF7duX7VqVXHhhRcWSYokxS233LLeebXQN52tTS30TYvvfOc7xdSpU4vVq1evt33atGnFLrvsUiQpPvrRj663rxZ6pyg6V5ta6p2iKIrm5ubijW98Y9GnT5/iiCOOKPt3cq30zD/raH1qpW868x6vVnqnM7Wplb5Zu3Zt8YY3vKFIUvzrv/5r8fTTT6+3/+mnny5++9vfrretVvqmKDpXn1rpnfa8853vLJIU73jHO9bbXku9U0652tRK3/zLv/xLkaQYP378en+ennvuueL4448vkhS77757a28URe30TWdqUwt909TUVLzqVa8qkhSHH3548eyzz7buu/POO4t+/foVpVKpJv9f1dnaVFvfbM2f8y1fvrzYYYcdiiTFWWed1fpv2eeee64YP358kaQ47rjjtsyNbuMEPGyzWv4xKOCpXh35Hn/0ox8tkhRHH330BvvuvvvuIklRX19fzJ8/f0sOdavrSG2q7Y1BW5YtW1Y0NTWV3X/MMccUSYrjjz9+ve210DedrU0t9E1H/OhHPyqSFMOHD19vey30zsaUq02t9c7VV19dJCm+8IUvtPt3cq32TEfrUyt905n3eLXSOwKe8r7xjW8USYo3v/nNxdq1azt0Tq30TVF0rj610jvlPP/880WfPn3a/CWfWuqdtrRXm1romxdffLGoq6srkhSPPPLIBvsXL15clEqlIknx2GOPtW6vhb7pbG1qoW9+/vOfF0mKhoaG4sknn9xg/6WXXlokKY444oj1ttdC33S2NtXeN1vy53yXXXZZkaR49atfXaxZs2a9fU899VTRs2fPIknx4IMPbp6bqSDVuxYUUPGKosiNN96YJJk4ceIG+w899NDss88+aWpqKrs+OZWtf//+6dmz/GqiRx11VJLkb3/7W+u2WumbztSGf9hnn32SJC+99FLrtlrpnY1pqza1ZuHChbnggguy77775pOf/GTZ42q1ZzpaH8qr1d5hfS1LmkyePLlDyzTXWt9san1Ifvazn+XFF1/MDjvskLe+9a2t22utd9pSrja1YvXq1Wlubk6SjBo1aoP9gwYNyuDBg5Mka9asSVI7fdOZ2tSKu+++O0ly8MEHZ7fddttg/8knn5wk+c1vfpNnn302Se30TWdqQ9f642c/+1mSdc937NGjx3r7RowY0bqE/U9+8pMtMfRtmndJ0A1+8pOf5MQTT8wRRxyRU089NVdddVWWLVvW3cPa5syZMyfz5s1LkrJrKbdsv++++7bauLY1U6dOzSmnnJIjjjgib3/723PZZZdl/vz53T2sraLl4Xvbbbdd6zZ9s05btXmlWu6bZN0DHZNk7Nixrdv0zjpt1eaVaqF3PvnJT2bx4sX5+te/nvr6+rLH1WrPdLQ+r1QLfZN0/D1eLfZOZ97/VnPfzJw5M3/5y18yePDgHHroobnpppvyrne9K//yL/+SU089Nddcc01WrVq13jm11Dedqc8rVXPvtOd73/tekuTUU09d7xeBaql3yilXm1eq5r4ZOHBgdt111yTJPffcs8H+v/71r1m0aFEGDhyYvfbaK0nt9E1navNK1dw3S5YsSZLsvPPObe5v2d7c3Jz7778/Se30TWdq80rV3Dft6Wx/rFmzJg8++OAmn1czumvqEGxMNS/R1tbHoEGDil/96lfdPcStamPf4zvuuKN1yusr17p9pf/8z/8skhRvfOMbt+RQt7pNWaKtrY/tttuu6pcCbG5uLsaMGVMkKc4888zW7bXcNy3K1aYoartv1qxZUzz99NPF1772taJfv35Fnz59ivvuu691fy33zsZqUxS10ztTpkwpkhTvete7WreV+zu5FntmU+pTFLXTN5v6Hq+Weqcz739roW++//3vF0mKQw89tPW5IP/8sc8++6y37Est9U1n6lMUtdE75cydO7d1mak//OEP6+2rpd5pS3u1KYra6ZvrrruuSFLssssuxU9+8pPiueeeK5YuXVrcdtttxT777FOUSqXiW9/6VuvxtdQ3m1qboqiNvjnnnHOKJMUb3vCGNvfPnDmz9Z6/+MUvFkVRO33TmdoURfX3zZb6Od8r6zl37tw2z7v++uuLJMWuu+7a9RupMGbwwFa0xx575HOf+1xmzJiR5cuX5/nnn8+vf/3rjBs3LkuWLMmJJ56YBx54oLuHuc1o+Y2IgQMHplQqtXnMoEGD1ju2lgwbNiwXXXRR7r///ixatCgvvfRS7r777hxzzDFZsWJFPvCBD+SWW27p7mFuMVdffXWmT5+eXr165d/+7d9at+ub8rVJarNvrrzyypRKpfTs2TO77rprPvaxj+Vf/uVfcu+99+aQQw5pPa4We6ejtUlqo3dWrlyZ//t//28GDBiQ//qv/9ro8bXWM5tan6Q2+ibZ9Pd4tdQ7nXn/Wwt90/Lbq/fff3+uv/76nHHGGXnyySezcuXKTJkyJaNGjcpf/vKXnHzyya1LB9VS33SmPklt9E45119/fZqbm7P33nvn4IMPXm9fLfVOW9qrTVI7ffOe97wnP/3pTzNkyJC8/e1vz5AhQzJw4MC89a1vTa9evXLrrbfmgx/8YOvxtdQ3m1qbpDb6puXPywMPPJCnn356g/0tS2Yl/+iBWumbztQmqY2+aU9n++OVn7fs78h5NaO7EyYopxpn8JSzatWq4pBDDimSDR/AVs029j3+7//+742m79dee22RpNhjjz221DC7RVf6v7m5uTjppJNa61LutyIq2YMPPlg0NjYWSYrLLrtsvX213DdF0X5t2lPNffOjH/2oGD9+fHHIIYcUO+64Y5GkGDBgQHHRRRet93DGWuydjtamPdXUOxdffHGRpPjqV7+63vZyfyfXWs9san3aU019055y7/FqrXfa0pn3v9XUN5MnT279TdS2foP54Ycfbn2o980331wURW31TWfq055q6p1yRo8eXSQpLrnkkg321VLvtKW92rSn2vqmubm5uPzyy4tdd9216NGjR7HnnnsW++67b9GrV6+irq6uOOmkk4pFixa1Hl9LfbOptdnYtaqlb1asWFEMHz68dabKK2dO/OIXvyj69+/f+nf1OeecUxRF7fRNZ2rTnmrpmy31c77f/e53rfVcu3Ztm+fdeeedRZKiR48eXbuJCmQGD2wDevXqlcmTJydZ9wC2mkyb29DY2Jhk3UMPy2lZe7vcc0ZqUalUyqWXXpokmT17dh555JFuHtHm9cQTT2TChAlZuXJlTj/99Jx77rnr7a/lvtlYbdpTzX1zyimn5K677sp9992X+fPn5957783IkSPzuc99LmeeeWbrcbXYOx2tTXuqpXf+/Oc/5/LLL8/YsWPzkY98pEPn1FLPdKY+7amWvtmYcu/xaql3yunM+99q6puWHkiST3ziExvsHz16dN785jcnSW677bb1zqmFvulMfdpTTb3Tlj/+8Y+ZMWNGSqVS3vWud22wv5Z6559trDbtqba++b//9//mvPPOy6677ppZs2Zl5syZ+dOf/pSnn346xx57bG688ca8+c1vztq1a5PUVt9sam3aU01909jYmB/+8Ifp169f7rrrrowYMSL7779/dt5550yYMCEDBw7Mm970piRJ3759W89Jqr9vOlOb9lRT37Sns/3xyvcF5c6thr7qLAEPbCNe//rXJ1n3ALbHH3+8m0ezbWiZXrl06dIURdHmMS0/DCg3RbNWvepVr8rgwYOTJLNmzerm0Ww+8+fPz1FHHZV58+bluOOOy3e/+90NpvXWat90pDYbU61988/GjRuXW2+9NQ0NDfnWt76Vp556Kknt9s4rlavNxlRD73z0ox/NmjVr8o1vfCN1dR17i1xLPdOZ+mxMNfRNR7T1Hq+Weqc9nXn/Wy1988rv6z777NPmMa9+9auTJE8++eR659RC33SmPhtTLb3Tlv/5n/9JkrzpTW/KbrvttsH+Wuqdf7ax2mxMtfTNjBkzcvXVV6e+vj4/+MEPMnLkyNZ9Q4cOzfXXX58hQ4bkkUceyY9+9KMktdM3nanNxlRL3yTJG97whjz00EP5wAc+kJ122il/+9vfkqwLxR544IHW0GunnXZKUjt9k2x6bTammvqmnM72xys/L/dLQdXSV50h4IFtRH19fevna9as6caRbDv22muvJOtS+Llz57Z5TMsPA1qO5R9aeqpa+mnx4sU56qijMnv27Bx22GH58Y9/vN6fmxa12DcdrU1HVFvflDN8+PAceOCBaW5uzowZM5LUZu+0pa3adESl98706dNTKpVy/PHHZ6eddlrv44c//GGS5Atf+EJ22mmn1jW3a6lnOlOfjqj0vumItt7j1VLvtKez73+roW/23nvv1s8bGhraPKZle8sPiGqpbzpTn46oht75Z83Nzfn+97+fJHn3u9/d5jG11Duv1JHadEQ19M3dd9+doijyqle9KrvuuusG+/v379/6/MWW56LVSt90pjYdUQ1902LPPffMtddem6effjqrV6/OM888k2984xsZNGhQ678XDjrooCS10zctNqU2HVFNfdOWzvbHyJEjW2tT7peCqqmvNpWAB7YRf/rTn1o/32WXXbpxJNuOESNGtP6mw913393mMS3bx40bt9XGVQmee+65PPvss0mqo59eeOGFHHvssXn00Udz8MEH55Zbbik77bbW+mZTarMx1dY3G9Pyprnlv7XWO+3559psTLX0ztq1a7NgwYINPlauXJlk3Z+3BQsWZOHChUlqr2c2tT4bUy19szFtvcertd4ppzPvf6ulb8aMGdO63MjGflCx8847J6mtvulMfTamWnrnn02dOjV///vf09jYmLe//e1tHlNLvfNKHanNxlRL3zz//PMbPablt+lb/r9eK33TmdpsTLX0zcbcfvvteeGFFzJ8+PCMHTs2Se30zca0VZuNqYW+6Wx/9OzZs7WOtdxX5Qh4YBvxxS9+Mcm6JQg6+o+UalcqlXLSSSclSa699toN9t9zzz35y1/+kvr6+hx//PFbe3jbtCuuuCJFUWTAgAGb9JvU26JVq1blhBNOyH333Zf99tsvt912W/r161f2+Frqm02tzcZUU99szJNPPtn6G1WjR49OUlu90562arMx1dA7LcsEtPXx3ve+N0kyefLkFEXRuhxQLfVMZ+qzMdXQNx3R1nu8Wuqd9nTm/W+19E2fPn1y7LHHJkmuu+66DfbPnz8/t99+e5LkiCOOSFJbfdOZ+mxMtfTOP2tZguz444/PgAED2jymlnrnlTpSm42plr5p+Y32v/3tb3n66ac32L98+fLcf//9SdYtE5XUTt90pjYbUy19057Vq1fn05/+dJLkIx/5SHr06JGkdvqmPeVqszG10Ddd6Y9//dd/TZJ897vf3WD27pw5czJlypQkycknn7wlhr5tK2Ab9d73vrdIUkyePLm7h7JZ/PrXvy7+/d//vXj88cfX27506dLi4x//eJGkSFLccMMN3TTCra8j3+PHH3+86NWrV5GkuOyyy4rm5uaiKIriySefLPbee+8iSfGRj3xkaw15q9lYbR599NHiIx/5SPHoo4+ut33FihXFf/7nfxZ1dXVFkuJzn/vc1hjuFrNmzZrixBNPLJIUe+yxRzF37twOnVcLfdOZ2tRK3xRFUTzwwAPFpz/96WL27Nkb7PvVr35V7LPPPkWS4thjj11vXy30TmdqU0u905b2/k6uhZ7ZmHL1qZW+6ex7vFronc7Uplb6piiK4uGHHy569OhR1NXVFd/97ndbty9ZsqR4y1veUiQpRo0aVaxatap1Xy30TYtNrU8t9U6Ll156qejXr1+RpLjlllvaPbaWeqcoOl6bWumb559/vhgyZEiRpDj00EOLJ554onXfggULigkTJhRJisbGxuLvf/97675a6JvO1KZW+qYoiuKXv/xlce+99663bc6cOcUxxxxTJCn23XffYuXKlevtr4W+KYpNr00t9M2W/DnfsmXLWv+snnXWWcXq1auLoiiK5557rhg/fnyRpDjmmGO2zI1t4wQ8bDPuuuuuYvvtt2/9aGhoKJIUvXv3Xm/7nDlzunuonXLjjTe2/iN25513Lg4++ODiwAMPbP1LrVQqFZ/5zGe6e5hbVGe/x9ddd13r/+h23nnnYsyYMUV9fX2RpDjooIOKF154oZvuaPPZ1NpMnz69tZ922GGH4qCDDioOOuigonfv3q3bJ06c2Po/ykp1ww03tN7PXnvtVYwfP77Nj7e//e0bnFvtfdOZ2tRK3xRFUUydOrX1nnbaaafita99bfGa17ymGDhwYOv2gw8+uFi4cOEG51Z773SmNrXUO23Z2D9Uqr1nNqZcfWqlb7ryHq/ae6cztamVvmnxjW98oyiVSkWSYsSIEcVrX/va1nsdMmRIMX369A3Oqfa+eaVNqU+t9U5R/OP94A477FA0NTVt9Pha6p2O1qaW+ubWW28tGhsbiyRFjx49ir322qvYd999W/9O7tmz53phaota6JtNrU0t9c0nPvGJIkkxaNCgYsyYMcWrX/3q1r+X99133/UCwVeqhb7Z1NpUY99s7Z/zTZkypfXPaksNW+o3cuTIYt68eVvjtrc5Ah62Ga/8gVN7H6/8bYpKMmfOnOLiiy8ujjjiiGLEiBHFdtttVzQ2Nha777578Z73vGeD1L8adeV7fPfddxcTJkwoBg8eXDQ0NBR77713MWnSpGLFihVb/0a2gE2tzZIlS4rJkycXxxxzTLH77rsXffv2LXr16lXssssuxdvf/vbitttu694b2ky+853vdKguu+22W5vnV3PfdKY2tdI3RVEUixcvLr785S8Xxx9/fLHHHnu03uuwYcOKY445pvjOd77T7j/2q7l3OlObWuqdtnTkN9GquWc2plx9aqVvuvoer5p7pzO1qZW+eaXf/e53xdve9rZiyJAhRa9evYqRI0cWH/vYx8r+0Kwoqrtv/llH61OLvdPyW+If//jHO3xOrfROR2tTa33z17/+tfjQhz5U7LnnnkVDQ0PRq1evYrfddive/e53Fw8++GDZ82qhbzalNrXUN1OnTi3e8Y53FCNHjiwaGxuLAQMGFIccckjxxS9+cYOZO/+s2vtmU2tTjX3THT/ne/TRR4tTTz21GDp0aNGrV69i9913L84+++xi8eLFW+gut32lonj5SWEAAAAAAABUhLruHgAAAAAAAACbRsADAAAAAABQYQQ8AAAAAAAAFUbAAwAAAAAAUGEEPAAAAAAAABVGwAMAAAAAAFBhBDwAAAAAAAAVRsADAAAAAABQYQQ8AAAAAAAAFUbAAwAAAAAAUGEEPAAAAAAAABVGwAMAAAAAAFBhBDwAAAAAAAAVRsADAAAAAABQYQQ8AAAAAAAAFUbAAwAAAAAAUGEEPAAAAAAAABVGwAMAAFBj3ve+96VUKmXkyJHdPRQAAKCTBDwAAAAAAAAVRsADAAAAAABQYQQ8AAAAAAAAFUbAAwAAAAAAUGEEPAAAAAAAABVGwAMAANSkP/zhD/ngBz+YV73qVenbt2/69OmTffbZJx/72Mcyc+bMNs/57ne/m1KplFKplCeffDKrVq3Kf/3Xf2Xs2LEZMGBA+vfvn3HjxuVrX/ta1q5du9ExLFy4MJ/61KcyZsyYDBw4MI2NjRk5cmTe/e5356677urQfaxevTrf+ta3ctxxx2XnnXdOQ0NDhg4dmoMOOihnnnlmfv/736coinavsXTp0nz605/Ofvvtlz59+mTgwIF505velOuvv75DYwAAALa+UrGxd/oAAABVZM2aNTnrrLPyjW98o+wx9fX1+drXvpYPfvCD623/7ne/m/e///1Jkoceeigf/OAH8+CDD7Z5jTe84Q259dZb069fvzb3//rXv84pp5yS5cuXlx3Hxz72sXzlK19JXV3bv5v38MMP51//9V/zxBNPlL1GkjzxxBMZOXJk69fve9/7ct1112W33XbLbbfdlmOOOSZPPvlk2TF89atfbff6AADA1mcGDwAAUFMmTpzYGu4cc8wx+d73vpc//OEPuf/++3P11Vdnv/32S1NTUz70oQ/llltuKXudD3/4w3nwwQfzf/7P/8mtt96aBx54IDfccEMOPvjgJMldd92Vd77znW2e+/DDD+dtb3tbli9fnvr6+vzbv/1bpk6dmj/84Q/55je/md133z1J8rWvfS0XXnhhm9d47LHH8sY3vrE13DnppJPywx/+MPfff3/uvffeXHfddXnXu96VPn36lL2Hl156Kccff3wWLVqUT33qU/nNb36TBx54IFdffXV22WWX1jHcfvvtG6kqAACwtZnBAwAA1Iyf/vSnefvb354kufrqq3PGGWdscMzKlStz3HHH5X//938zcuTIzJw5Mz179kyy/gyeJPnc5z63QQCzZs2aTJgwoTUU+cUvfpHjjjtuvWMOOeSQ3H///enRo0duvfXWHH300evtX7JkSd7whjfkscceS11dXR555JHst99+6x0zduzYTJ8+PXV1dbn++utz6qmntnnPixYtSu/evbPddtu1bmuZwZMkAwcOzF133bXB9WfNmpUDDjggK1euzPHHH5+bbrqpzesDAADdwwweAACgZnz+859Psm62S1vhTpI0Nja2Lkn25JNP5je/+U2bx73mNa/JBRdcsMH2nj175pprrkl9fX2S5Otf//p6+1tmCyXJGWecsUG4kySDBg3Kt771rSRJc3PzBte4/fbbM3369CTJxz/+8bLhTpJsv/3264U7/+w//uM/Ngh3kmTPPffMiSeemCT5/e9/X/Z8AACgewh4AACAmvDMM8+0Pi/nHe94R7vHvvrVr86QIUOSJNOmTWvzmPe+971ln42zyy67tAY3v/nNb7J27drWfVOmTGn9fOLEiWXHMH78+Lz61a/e4Jwk+eUvf9n6+Sc/+cn2bqVdpVIpp59+etn9Bx10UJJ1M4qWLl3a6dcBAAA2PwEPAABQEx544IHWz0877bSUSqV2P5577rkkyfz589u8Xsuzdso55JBDkqx7zs3jjz/euv3RRx9NkvTq1Stjxoxp9xrjxo1LksycOTOrV69u3d4ye2fEiBHZbbfd2r1Ge4YMGZLtt9++7P7Bgwe3fv788893+nUAAIDNT8ADAADUhGeffbZT57300kttbh86dGi75+24446tny9evHiDzwcPHtz6bJ9ydtpppyRJURRZsmRJ6/aW8GnYsGHtnr8xvXv3bnf/K2covXIWEgAA0P3a/9cEAABAlXhlQHH99dfnNa95TYfOGzRoUJvbS6VSu+cVRdHu/o2dv7muAQAAVCcBDwAAUBNeuRRZqVTK/vvv36XrLViwIK961avK7n/ljKFXLnXW8vmiRYuyZs2admfxLFiwoHW8rwyaWp4PNHfu3M4NHgAAqHiWaAMAAGrCK5938+tf/7rL17v//vs7tL93794ZNWpU6/aWYGn16tWtz9Ip5w9/+EOSZK+99kqvXr1at48dOzZJMmfOnDz11FObPngAAKDiCXgAAICasOeee2bfffdNkvzgBz/InDlzunS9//mf/ym7hNozzzzTGiIdfvjh6dGjR+u+I488svXza6+9tuz1p02blscee2yDc5LkbW97W+vnX/rSlzZ98AAAQMUT8AAAADXjU5/6VJJk5cqV+dd//dcsXLiw7LGrVq3K17/+9axcubLN/Q8//HAuv/zyDbavWbMmH/zgB7N69eokyUc+8pH19h9yyCE5+OCDkyTXXHNN7rjjjg2usWzZsnz4wx9OktTV1W1wjSOPPDIHHXRQkuSqq67KD37wg7L3sXjx4qxYsaLsfgAAoDJ5Bg8AAFAzTjvttNx+++257rrr8uCDD2bffffNhz/84Rx22GHZYYcd8uKLL2b27Nn5/e9/n5/97GdZvHhx3vOe97R5rde+9rW54IIL8vDDD+c973lPhg4dmpkzZ+aKK65oXVrtbW97WyZMmLDBud/61rcybty4rF69Oscdd1w+/vGP521ve1v69u2b6dOn59JLL83jjz+eJDn33HPbfF7Q//zP/+SQQw7JCy+8kNNOOy0//vGPc+qpp2bUqFFZu3ZtZs2alTvuuCM/+clP8sc//jEjR47cfIUEAAC6Xakot6YAAABAFVq7dm0uuuiifPGLX8zatWvbPbZPnz5ZuHBhtttuuyTJd7/73bz//e9Pkjz00EOZOHFi2efojB8/Pr/61a/Sr1+/Nvf/+te/zimnnJLly5eXff2Pfexj+cpXvpK6urYXX3jwwQdz0kkn5emnn273Pp544on1Ap73ve99ue6667LbbrvlySefLHveK+/3n68BAAB0L0u0AQAANaVHjx75whe+kMceeyznnHNOxowZk0GDBqVHjx7p169f9ttvv7zzne/Mddddl3nz5rWGO/9s0KBBueeee/L5z38+Bx54YPr165e+ffvm4IMPzlVXXZXf/va3ZcOdJDn66KMza9asXHTRRTnwwAPTv3//NDQ0ZMSIEXnnO9+Z3//+9/nqV79aNtxJkoMOOih//etf85WvfCVHHHFEhg4dmvr6+uy000456KCD8olPfCLTpk0TzAAAQBUygwcAAKCDzGgBAAC2FWbwAAAAAAAAVBgBDwAAAAAAQIUR8AAAAAAAAFQYAQ8AAAAAAECFEfAAAAAAAABUmFJRFEV3DwIAAAAAAICOM4MHAAAAAACgwgh4AAAAAAAAKoyABwAAAAAAoMIIeAAAAAAAACqMgAcAAAAAAKDCCHgAAAAAAAAqjIAHAAAAAACgwgh4AAAAAAAAKoyABwAAAAAAoML8/637d3HKS3xbAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_history_metric('top5acc', ylim=[0,1], yticks=np.arange(0.0, 1.1, 0.1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15fbd313",
   "metadata": {
    "papermill": {
     "duration": 0.060108,
     "end_time": "2023-07-21T10:11:19.371577",
     "exception": false,
     "start_time": "2023-07-21T10:11:19.311469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Inference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "403811fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:19.494396Z",
     "iopub.status.busy": "2023-07-21T10:11:19.493440Z",
     "iopub.status.idle": "2023-07-21T10:11:19.499023Z",
     "shell.execute_reply": "2023-07-21T10:11:19.498074Z"
    },
    "papermill": {
     "duration": 0.070382,
     "end_time": "2023-07-21T10:11:19.502036",
     "exception": false,
     "start_time": "2023-07-21T10:11:19.431654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "frames\n",
      "masking\n",
      "embedding\n",
      "encoder\n",
      "phrase\n",
      "decoder\n",
      "classifier\n"
     ]
    }
   ],
   "source": [
    "# Model Layer Names\n",
    "for l in model.layers:\n",
    "    print(l.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "a5fcfdbf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:19.624852Z",
     "iopub.status.busy": "2023-07-21T10:11:19.623982Z",
     "iopub.status.idle": "2023-07-21T10:11:26.094000Z",
     "shell.execute_reply": "2023-07-21T10:11:26.092843Z"
    },
    "papermill": {
     "duration": 6.534219,
     "end_time": "2023-07-21T10:11:26.096740",
     "exception": false,
     "start_time": "2023-07-21T10:11:19.562521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "demo_raw_data shape: (123, 164), dtype: float32\n",
      "demo_output shape: (32, 62), dtype: float32\n",
      "demo_outputs phrase decoded: 3 creek house\n",
      "phrase true: 3 creekhouse\n"
     ]
    }
   ],
   "source": [
    "# TFLite model for submission\n",
    "class TFLiteModel(tf.Module):\n",
    "    def __init__(self, model):\n",
    "        super(TFLiteModel, self).__init__()\n",
    "\n",
    "        # Load the feature generation and main models\n",
    "        self.preprocess_layer = preprocess_layer\n",
    "        self.model = model\n",
    "    \n",
    "    @tf.function(jit_compile=True)\n",
    "    def encoder(self, x, frames_inp):\n",
    "        x = self.model.get_layer('embedding')(x)\n",
    "        x = self.model.get_layer('encoder')(x, frames_inp)\n",
    "        \n",
    "        return x\n",
    "        \n",
    "    @tf.function(jit_compile=True)\n",
    "    def decoder(self, x, phrase_inp):\n",
    "        x = self.model.get_layer('decoder')(x, phrase_inp)\n",
    "        x = self.model.get_layer('classifier')(x)\n",
    "        \n",
    "        return x\n",
    "    \n",
    "    @tf.function(input_signature=[tf.TensorSpec(shape=[None, N_COLS0], dtype=tf.float32, name='inputs')])\n",
    "    def __call__(self, inputs):\n",
    "        # Number Of Input Frames\n",
    "        N_INPUT_FRAMES = tf.shape(inputs)[0]\n",
    "        # Preprocess Data\n",
    "        frames_inp = self.preprocess_layer(inputs)        \n",
    "        # Add Batch Dimension\n",
    "        frames_inp = tf.expand_dims(frames_inp, axis=0)\n",
    "        # Get Encoding\n",
    "        encoding = self.encoder(frames_inp, frames_inp)\n",
    "        # Make Prediction\n",
    "        phrase = tf.fill([1,MAX_PHRASE_LENGTH], PAD_TOKEN)\n",
    "        # Predict One Token At A Time\n",
    "        stop = False\n",
    "        for idx in tf.range(MAX_PHRASE_LENGTH):\n",
    "            # Cast phrase to int8\n",
    "            phrase = tf.cast(phrase, tf.int8)\n",
    "            # If EOS token is predicted, stop predicting\n",
    "            outputs = tf.cond(\n",
    "                stop,\n",
    "                lambda: tf.one_hot(tf.cast(phrase, tf.int32), N_UNIQUE_CHARACTERS),\n",
    "                lambda: self.decoder(encoding, phrase)\n",
    "            )\n",
    "            # Add predicted token to input phrase\n",
    "            phrase = tf.cast(phrase, tf.int32)\n",
    "            # Replcae PAD token with predicted token up to idx\n",
    "            phrase = tf.where(\n",
    "                tf.range(MAX_PHRASE_LENGTH) < idx + 1,\n",
    "                tf.argmax(outputs, axis=2, output_type=tf.int32),\n",
    "                phrase,\n",
    "            )\n",
    "            # Predicted Token\n",
    "            predicted_token = phrase[0,idx]\n",
    "            # If EOS (End Of Sentence) token is predicted stop\n",
    "            if not stop:\n",
    "                stop = predicted_token == EOS_TOKEN\n",
    "            \n",
    "        # Squeeze outputs\n",
    "        outputs = tf.squeeze(phrase, axis=0)\n",
    "        outputs = tf.one_hot(outputs, N_UNIQUE_CHARACTERS)\n",
    "            \n",
    "        # Return a dictionary with the output tensor\n",
    "        return {'outputs': outputs }\n",
    "\n",
    "# Define TF Lite Model\n",
    "tflite_keras_model = TFLiteModel(model)\n",
    "\n",
    "# Sanity Check\n",
    "# demo_sequence_id = 1816796431\n",
    "demo_sequence_id = example_parquet_df.index.unique()[0]\n",
    "demo_raw_data = example_parquet_df.loc[demo_sequence_id, COLUMNS0].values\n",
    "demo_phrase_true = train_sequence_id.loc[demo_sequence_id, 'phrase']\n",
    "print(f'demo_raw_data shape: {demo_raw_data.shape}, dtype: {demo_raw_data.dtype}')\n",
    "demo_output = tflite_keras_model(demo_raw_data)['outputs'].numpy()\n",
    "print(f'demo_output shape: {demo_output.shape}, dtype: {demo_output.dtype}')\n",
    "print(f'demo_outputs phrase decoded: {outputs2phrase(demo_output)}')\n",
    "print(f'phrase true: {demo_phrase_true}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "4c371f01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:11:26.220006Z",
     "iopub.status.busy": "2023-07-21T10:11:26.219645Z",
     "iopub.status.idle": "2023-07-21T10:12:30.225679Z",
     "shell.execute_reply": "2023-07-21T10:12:30.224597Z"
    },
    "papermill": {
     "duration": 64.069913,
     "end_time": "2023-07-21T10:12:30.228306",
     "exception": false,
     "start_time": "2023-07-21T10:11:26.158393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create Model Converter\n",
    "keras_model_converter = tf.lite.TFLiteConverter.from_keras_model(tflite_keras_model)\n",
    "# Convert Model\n",
    "tflite_model = keras_model_converter.convert()\n",
    "# Write Model\n",
    "with open('/kaggle/working/model.tflite', 'wb') as f:\n",
    "    f.write(tflite_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "8ae07f88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:12:30.374252Z",
     "iopub.status.busy": "2023-07-21T10:12:30.373186Z",
     "iopub.status.idle": "2023-07-21T10:12:30.379090Z",
     "shell.execute_reply": "2023-07-21T10:12:30.378210Z"
    },
    "papermill": {
     "duration": 0.091774,
     "end_time": "2023-07-21T10:12:30.381209",
     "exception": false,
     "start_time": "2023-07-21T10:12:30.289435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Add selected_columns json to only select specific columns from input frames\n",
    "with open('inference_args.json', 'w') as f:\n",
    "     json.dump({ 'selected_columns': COLUMNS0.tolist() }, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "1d67f281",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-21T10:12:30.503722Z",
     "iopub.status.busy": "2023-07-21T10:12:30.503360Z",
     "iopub.status.idle": "2023-07-21T10:12:32.434116Z",
     "shell.execute_reply": "2023-07-21T10:12:32.432919Z"
    },
    "papermill": {
     "duration": 1.995382,
     "end_time": "2023-07-21T10:12:32.436706",
     "exception": false,
     "start_time": "2023-07-21T10:12:30.441324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: kaggle/working/model.tflite (deflated 9%)\r\n",
      "  adding: kaggle/working/inference_args.json (deflated 83%)\r\n"
     ]
    }
   ],
   "source": [
    "# Zip Model\n",
    "!zip submission.zip /kaggle/working/model.tflite /kaggle/working/inference_args.json"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12745.599448,
   "end_time": "2023-07-21T10:12:35.448795",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-07-21T06:40:09.849347",
   "version": "2.4.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "025a96f1f7114438bdeed3fe213411b3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "030a927d87af467f9e5b03bd87ef0004": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "099d04e4d88d4980938ef17f9e7f4f8e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0f4c66cece464555b34f978320dff796": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_99ff192845cf4f2e98d3d8225e75ed4f",
       "placeholder": "​",
       "style": "IPY_MODEL_8cd77ed259724b5c97a3a59b5029b384",
       "value": "100%"
      }
     },
     "115cb4f183ab4fee8aa64431015b9747": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1ca9370357f84d0ab651272d79740494": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1cb8b9a9a853489ab6d06f2d050b2a18": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "230889a65f904c59b3c85357d3c9513a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0f4c66cece464555b34f978320dff796",
        "IPY_MODEL_58a642777dd6487d8146894085576a30",
        "IPY_MODEL_52ef11a9eb63445b9137953a3e755874"
       ],
       "layout": "IPY_MODEL_025a96f1f7114438bdeed3fe213411b3"
      }
     },
     "31ecb913f2d745deb42a4dec1350479c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dba5d03d1c4c4fe98c144fbb8391054c",
        "IPY_MODEL_f743b61c1d5843e8a0aa0d2d7993b121",
        "IPY_MODEL_ecfe50531db74ce687d6062a200b0093"
       ],
       "layout": "IPY_MODEL_ace3d6acbd7340be83383345a6907cb4"
      }
     },
     "3599a7b09ddb473182e4324ffe31bbc3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "376e53c58c63452d81f7d1e47237d67e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5697e282ba5e48d395efed1eaddd5ee1",
        "IPY_MODEL_49ddaba20561450db739dc9612a1e0d4",
        "IPY_MODEL_661aa475aa5c4f03ae0bacef127dcae8"
       ],
       "layout": "IPY_MODEL_1cb8b9a9a853489ab6d06f2d050b2a18"
      }
     },
     "3ac313fe6937482faddbe7559acd2689": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "402c16685d1c4e0bb7b90b0e909e40a4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "49732e6b9d0c4d2dbc683231361f5e2e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "49ddaba20561450db739dc9612a1e0d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_115cb4f183ab4fee8aa64431015b9747",
       "max": 10.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7f4cd7b685aa48da8792ec953a780906",
       "value": 10.0
      }
     },
     "52ef11a9eb63445b9137953a3e755874": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_030a927d87af467f9e5b03bd87ef0004",
       "placeholder": "​",
       "style": "IPY_MODEL_e7705f314cdf469abe453e3fb4037309",
       "value": " 1000/1000 [02:09&lt;00:00,  8.10it/s]"
      }
     },
     "5697e282ba5e48d395efed1eaddd5ee1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_402c16685d1c4e0bb7b90b0e909e40a4",
       "placeholder": "​",
       "style": "IPY_MODEL_3599a7b09ddb473182e4324ffe31bbc3",
       "value": "100%"
      }
     },
     "58a642777dd6487d8146894085576a30": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "danger",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_099d04e4d88d4980938ef17f9e7f4f8e",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dc9159d01daf48188204afc698a936eb",
       "value": 1000.0
      }
     },
     "661aa475aa5c4f03ae0bacef127dcae8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_49732e6b9d0c4d2dbc683231361f5e2e",
       "placeholder": "​",
       "style": "IPY_MODEL_3ac313fe6937482faddbe7559acd2689",
       "value": " 10/10 [00:01&lt;00:00,  5.90it/s]"
      }
     },
     "7f4cd7b685aa48da8792ec953a780906": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8cd77ed259724b5c97a3a59b5029b384": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "99ff192845cf4f2e98d3d8225e75ed4f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a527e182a6384b10bd1493c753ac4d61": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ace3d6acbd7340be83383345a6907cb4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bbee590da52c4fed8da837c8bf3d7460": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d1434e212f7a47819ad7e35fee820be8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d88f04f1593e41d0a5f67c417bc476af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "dba5d03d1c4c4fe98c144fbb8391054c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_1ca9370357f84d0ab651272d79740494",
       "placeholder": "​",
       "style": "IPY_MODEL_bbee590da52c4fed8da837c8bf3d7460",
       "value": "100%"
      }
     },
     "dc9159d01daf48188204afc698a936eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e7705f314cdf469abe453e3fb4037309": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "ecfe50531db74ce687d6062a200b0093": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d1434e212f7a47819ad7e35fee820be8",
       "placeholder": "​",
       "style": "IPY_MODEL_d88f04f1593e41d0a5f67c417bc476af",
       "value": " 10/10 [00:01&lt;00:00,  6.25it/s]"
      }
     },
     "f5889a4a06b849049d8989b870166733": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f743b61c1d5843e8a0aa0d2d7993b121": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_a527e182a6384b10bd1493c753ac4d61",
       "max": 10.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f5889a4a06b849049d8989b870166733",
       "value": 10.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
